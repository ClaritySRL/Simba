pushSection('Bitmap');

addGlobalFunc('function CreateBitmapString(bmp: Int32): string', @_LapeCreateBitmapString);
addGlobalFunc('function GetMufasaBitmap(bmp: Int32): TMufasaBitmap', @_LapeGetMufasaBitmap);
addGlobalFunc('function CreateBitmap(w,h: Int32): Int32', @_LapeCreateBitmap);
addGlobalFunc('procedure FreeBitmap(Number: Int32)', @_LapeFreeBitmap);
addGlobalFunc('procedure SaveBitmap(Bmp: Int32; path: string)', @_LapeSaveBitmap);
addGlobalFunc('function BitmapExists(Index : Int32) : boolean', @_LapeBitmapExists);
addGlobalFunc('function BitmapFromString(Width,height: Int32; Data: string): Int32', @_LapeBitmapFromString);
addGlobalFunc('function LoadBitmap(Path: String): Int32', @_LapeLoadBitmap);
addGlobalFunc('procedure SetBitmapSize(Bmp,NewW,NewH: Int32)', @_LapeSetBitmapSize);
addGlobalFunc('procedure StretchBitmapResize(Bmp,NewW,NewH: Int32)', @_LapeStretchBitmapResize);
addGlobalFunc('procedure ResizeBitmapEx(const bmp: Int32; const Method: TBmpResizeMethod; const NewWidth, NewHeight: Int32)', @_LapeResizeBitmapEx);
addGlobalFunc('procedure GetBitmapSize(Bmp: Int32; var BmpW,BmpH: Int32)', @_LapeGetBitmapSize);
addGlobalFunc('procedure SetPersistentMemoryBitmap(bmp: Int32; mem: PtrUInt; awidth, aheight: Int32)', @_LapeSetPersistentMemoryBitmap);
addGlobalFunc('procedure ResetPersistentMemoryBitmap(bmp: Int32)', @_LapeResetPersistentMemoryBitmap);
addGlobalFunc('procedure SetBitmapName(Bmp: Int32; name: string)', @_LapeSetBitmapName);
addGlobalFunc('function CreateMirroredBitmap(Bmp: Int32): Int32', @_LapeCreateMirroredBitmap);
addGlobalFunc('function CreateMirroredBitmapEx(Bmp: Int32; MirrorStyle: TBmpMirrorStyle): Int32', @_LapeCreateMirroredBitmapEx);
addGlobalFunc('function FastGetPixel(bmp,x,y: Int32): Integer', @_LapeFastGetPixel);
addGlobalFunc('function FastGetPixels(bmp: Int32; TPA: TPointArray): TIntegerArray', @_LapeFastGetPixels);
addGlobalFunc('function GetBitmapAreaColors(bmp,xs, ys, xe, ye: Int32): T2DIntegerArray', @_LapeGetBitmapAreaColors);
addGlobalFunc('function FindColorsBitmap(bmp: Int32; var points: TPointArray; const color: Int32): boolean', @_LapeFindColorsBitmap);
addGlobalFunc('procedure FastSetPixel(Bmp,x,y: Int32; Color: TColor)', @_LapeFastSetPixel);
addGlobalFunc('procedure FastSetPixels(Bmp: Int32; TPA: TPointArray; Colors: TIntegerArray)', @_LapeFastSetPixels);
addGlobalFunc('procedure DrawTPABitmap(bitmap: Int32; TPA: TPointArray; Color: Int32)', @_LapeDrawTPABitmap);
addGlobalFunc('procedure DrawATPABitmap(bitmap: Int32; ATPA: T2DPointArray)', @_LapeDrawATPABitmap);
addGlobalFunc('procedure DrawATPABitmapEx(bitmap: Int32; ATPA: T2DPointArray; Colors: TIntegerArray)', @_LapeDrawATPABitmapEx);
addGlobalFunc('procedure FastDrawClear(bmp: Int32; Color: TColor)', @_LapeFastDrawClear);
addGlobalFunc('procedure DrawBitmap(Bmp: Int32; Dest: TCanvas; x, y: Int32)', @_LapeDrawBitmap);
addGlobalFunc('procedure FastDrawTransparent(x, y: Int32; SourceBitmap, TargetBitmap: Int32)', @_LapeFastDrawTransparent);
addGlobalFunc('procedure SetTransparentColor(Bmp: Int32; Color: TColor)', @_LapeSetTransparentColor);
addGlobalFunc('function GetTransparentColor(Bmp: Int32): TColor', @_LapeGetTransparentColor);
addGlobalFunc('procedure FastReplaceColor(bmp: Int32; OldColor, NewColor: TColor)', @_LapeFastReplaceColor);
addGlobalFunc('function RotateBitmap(bitmap: Int32; angle: Extended): Int32', @_LapeRotateBitmap);
addGlobalFunc('function RotateBitmapEx(Bitmap: Int32; Angle: Single; Expand: Boolean; Smooth: Boolean): Int32', @_LapeRotateBitmapEx);
addGlobalFunc('function Desaturate(Bitmap: Int32): Int32', @_LapeDesaturate);
addGlobalFunc('procedure InvertBitmap(Bitmap: Int32)', @_LapeInvertBitmap);
addGlobalFunc('function CopyBitmap(Bitmap: Int32): Int32', @_LapeCopyBitmap);
addGlobalFunc('function GreyScaleBitmap(Bitmap: Int32): Int32', @_LapeGreyScaleBitmap);
addGlobalFunc('function BrightnessBitmap(Bitmap, br: Int32): Int32', @_LapeBrightnessBitmap);
addGlobalFunc('function ContrastBitmap(bitmap: Int32; co: extended): Int32', @_LapeContrastBitmap);
addGlobalFunc('function PosterizeBitmap(Bitmap: Int32; po: Int32): Int32', @_LapePosterizeBitmap);
addGlobalFunc('function CreateMaskFromBitmap(Bitmap: Int32): TMask', @_LapeCreateMaskFromBitmap);
addGlobalFunc('procedure RectangleBitmap(bitmap: Int32; const box: TBox; Color: TColor)', @_LapeRectangleBitmap);
addGlobalFunc('procedure RectangleBitmapEx(const Bitmap: Int32; const Box: TBox; const Color: Int32; const Transparency: Extended)', @_LapeRectangleBitmapEx);
addGlobalFunc('procedure FloodFillBitmap(bitmap: Int32; const StartPoint: TPoint; const SearchCol,ReplaceCol: TColor)', @_LapeFloodFillBitmap);
addGlobalFunc('function ConvoluteBitmap(bitmap: Int32; matrix: T2DExtendedArray): Int32', @_LapeConvoluteBitmap);
addGlobalFunc('procedure ThresholdAdaptiveBitmap(const bmp: Int32; Alpha, Beta: Byte; Invert: Boolean; Method: TBmpThreshMethod; C: Int32)', @_LapeThresholdAdaptiveBitmap);
addGlobalFunc('procedure CropBitmap(const bmp: Int32; const xs, ys, xe, ye: Int32)', @_LapeCropBitmap);
addGlobalFunc('procedure BlurBitmap(const bmp, block: Int32)', @_LapeBlurBitmap);
addGlobalFunc('function CalculatePixelShift(Bmp1, Bmp2: Int32; CompareBox: TBox): Int32', @_LapeCalculatePixelShift);
addGlobalFunc('function CalculatePixelShiftTPA(Bmp1, Bmp2: Int32; CPoints: TPointArray) : Int32', @_LapeCalculatePixelShiftTPA);
addGlobalFunc('function CalculatePixelTolerance(Bmp1, Bmp2: Int32; CompareBox: TBox; CTS: Int32): extended', @_LapeCalculatePixelTolerance);
addGlobalFunc('function CalculatePixelToleranceTPA(Bmp1, Bmp2: Int32; CPoints: TPointArray; CTS: Int32) : extended', @_LapeCalculatePixelToleranceTPA);
addGlobalFunc('function GetColorsBitmap(const bmp: Int32): TIntegerArray', @_LapeGetColorsBitmap);
addGlobalFunc('function BitmapToMatrix(const bmp: Int32): T2DIntegerArray',@_LapeBitmapToMatrix);
addGlobalFunc('procedure DrawMatrixBitmap(const bmp: Int32; const Matrix: T2DIntegerArray)', @_LapeDrawMatrixBitmap);
addGlobalFunc('procedure CopyClientToBitmap(bmp, xs, ys, xe, ye: Int32)', @_LapeCopyClientToBitmap);
addGlobalFunc('function BitmapFromClient(const xs, ys, xe, ye: Int32): Int32', @_LapeBitmapFromClient);
addGlobalFunc('function BitmapFromText(const text, font: String): Int32', @_LapeBitmapFromText);

popSection();

