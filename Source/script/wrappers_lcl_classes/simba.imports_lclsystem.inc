addGlobalType('procedure(Sender: TObject) of object', 'TNotifyEvent', FFI_DEFAULT_ABI);
addGlobalType('^TNotifyEvent', 'PNotifyEvent');
addGlobalType('UInt32', 'THandle');
addGlobalType('string', 'TComponentName');
addGlobalType('(soBeginning, soCurrent, soEnd)', 'TSeekOrigin');
addGlobalType('string', 'TCaption');

addClass('TPersistent');
addGlobalFunc('procedure TPersistent.Assign(Source: TPersistent); constref', @_LapePersistent_Assign);
addGlobalFunc('function TPersistent.GetNamePath: string; constref', @_LapePersistent_GetNamePath);
addGlobalFunc('procedure TPersistent.Init()', @_LapePersistent_Init);
addGlobalFunc('procedure TPersistent.Free; constref', @_LapePersistent_Free);

addClass('TCollection');
addClass('TCollectionItem', 'TPersistent');
addGlobalFunc('procedure TCollectionItem.Init(ACollection: TCollection)', @_LapeCollectionItem_Init);
//addGlobalFunc('function TCollectionItem.GetNamePath: string; constref', @_LapeCollectionItem_GetNamePath);
addClassVar('TCollectionItem', 'Collection', 'TCollection', @_LapeCollectionItem_Collection_Read, @_LapeCollectionItem_Collection_Write);
addClassVar('TCollectionItem', 'ID', 'Integer', @_LapeCollectionItem_ID_Read, nil);
addClassVar('TCollectionItem', 'Index', 'Integer', @_LapeCollectionItem_Index_Read, @_LapeCollectionItem_Index_Write);
addClassVar('TCollectionItem', 'DisplayName', 'string', @_LapeCollectionItem_DisplayName_Read, @_LapeCollectionItem_DisplayName_Write);
// addGlobalFunc('procedure TCollectionItem.Free; constref', @_LapeCollectionItem_Free);

addGlobalFunc('function TCollection.Owner: TPersistent; constref', @_LapeCollection_Owner);
addGlobalFunc('function TCollection.Add: TCollectionItem; constref', @_LapeCollection_Add);
//addGlobalFunc('procedure TCollection.Assign(Source: TPersistent); constref', @_LapeCollection_Assign);
addGlobalFunc('procedure TCollection.BeginUpdate; constref', @_LapeCollection_BeginUpdate);
addGlobalFunc('procedure TCollection.Clear; constref', @_LapeCollection_Clear);
addGlobalFunc('procedure TCollection.EndUpdate; constref', @_LapeCollection_EndUpdate);
addGlobalFunc('procedure TCollection.Delete(Index: Integer); constref', @_LapeCollection_Delete);
//addGlobalFunc('function TCollection.GetNamePath: string; constref; override', @_LapeCollection_GetNamePath);
addGlobalFunc('function TCollection.Insert(Index: Integer): TCollectionItem; constref', @_LapeCollection_Insert);
addGlobalFunc('function TCollection.FindItemID(ID: Integer): TCollectionItem; constref', @_LapeCollection_FindItemID);
addGlobalFunc('procedure TCollection.Exchange(Const Index1, index2: integer); constref', @_LapeCollection_Exchange);
addClassVar('TCollection', 'Count', 'Integer', @_LapeCollection_Count_Read, nil);
addClassVar('TCollection', 'Items', 'TCollectionItem', @_LapeCollection_Items_Index_Read, @_LapeCollection_Items_Index_Write, True);
//addGlobalFunc('procedure TCollection.Free; constref', @_LapeCollection_Free);

addClass('TComponent', 'TPersistent');
addGlobalType('(csLoading, csReading, csWriting, csDestroying,csDesigning, csAncestor, csUpdating, csFixups, csFreeNotification,csInline, csDesignInstance)', 'TComponentState');
addGlobalType('^TComponentState', 'PComponentState');
addGlobalType('^string', 'PComponentName');
addGlobalFunc('procedure TComponent.Init(AOwner: TComponent)', @_LapeComponent_Init);
addGlobalFunc('procedure TComponent.DestroyComponents; constref', @_LapeComponent_DestroyComponents);
addGlobalFunc('procedure TComponent.Destroying; constref', @_LapeComponent_Destroying);
addGlobalFunc('function TComponent.FindComponent(const AName: string): TComponent; constref', @_LapeComponent_FindComponent);
addGlobalFunc('procedure TComponent.InsertComponent(AComponent: TComponent); constref', @_LapeComponent_InsertComponent);
addGlobalFunc('procedure TComponent.RemoveComponent(AComponent: TComponent); constref', @_LapeComponent_RemoveComponent);
addGlobalFunc('function TComponent.GetComponent(index: integer): TComponent; constref', @_LapeComponent_Components);
addClassVar('TComponent', 'ComponentCount', 'Integer', @_LapeComponent_ComponentCount_Read);
addClassVar('TComponent', 'ComponentIndex', 'Integer', @_LapeComponent_ComponentIndex_Read, @_LapeComponent_ComponentIndex_Write);
addClassVar('TComponent', 'ComponentState', 'TComponentState', @_LapeComponent_ComponentState_Read);
addClassVar('TComponent', 'Owner', 'TComponent', @_LapeComponent_Owner_Read);
addClassVar('TComponent', 'Name', 'TComponentName', @_LapeComponent_Name_Read, @_LapeComponent_Name_Write);
addClassVar('TComponent', 'Tag', 'Integer', @_LapeComponent_Tag_Read, @_LapeComponent_Tag_Write);
//addGlobalFunc('procedure TComponent.Free; constref', @_LapeComponent_Free);

addClass('TStream');
addGlobalFunc('function TStream.Read(var Buffer; Count: Longint): Longint; constref', @_LapeStream_Read);
addGlobalFunc('function TStream.Write(constref Buffer; Count: Longint): Longint; constref', @_LapeStream_Write); //test
addGlobalFunc('function TStream.Seek(Offset: Longint; Origin: Word): Longint; constref', @_LapeStream_Seek);
addGlobalFunc('procedure TStream.ReadBuffer(var Buffer; Count: Longint); constref', @_LapeStream_ReadBuffer);
addGlobalFunc('procedure TStream.WriteBuffer(constref Buffer; Count: Longint); constref', @_LapeStream_WriteBuffer);
addGlobalFunc('function TStream.CopyFrom(Source: TStream; Count: Int64): Int64; constref', @_LapeStream_CopyFrom);
addGlobalFunc('function TStream.ReadComponent(Instance: TComponent): TComponent; constref', @_LapeStream_ReadComponent);
addGlobalFunc('function TStream.ReadComponentRes(Instance: TComponent): TComponent; constref', @_LapeStream_ReadComponentRes);
addGlobalFunc('procedure TStream.WriteComponent(Instance: TComponent); constref', @_LapeStream_WriteComponent);
addGlobalFunc('procedure TStream.WriteComponentRes(const ResName: string; Instance: TComponent); constref', @_LapeStream_WriteComponentRes);
addGlobalFunc('procedure TStream.WriteDescendent(Instance, Ancestor: TComponent); constref', @_LapeStream_WriteDescendent);
addGlobalFunc('procedure TStream.WriteDescendentRes(const ResName: string; Instance, Ancestor: TComponent); constref', @_LapeStream_WriteDescendentRes);
addGlobalFunc('procedure TStream.WriteResourceHeader(const ResName: string; var FixupInfo: Integer); constref', @_LapeStream_WriteResourceHeader);
addGlobalFunc('procedure TStream.FixupResourceHeader(FixupInfo: Integer); constref', @_LapeStream_FixupResourceHeader);
addGlobalFunc('procedure TStream.ReadResHeader; constref', @_LapeStream_ReadResHeader);
addGlobalFunc('function TStream.ReadByte: Byte; constref', @_LapeStream_ReadByte);
addGlobalFunc('function TStream.ReadDWord: UInt32; constref', @_LapeStream_ReadDWord);
addGlobalFunc('function TStream.ReadAnsiString: String; constref', @_LapeStream_ReadAnsiString);
addGlobalFunc('procedure TStream.WriteByte(b : Byte); constref', @_LapeStream_WriteByte);
addGlobalFunc('procedure TStream.WriteWord(w : Word); constref', @_LapeStream_WriteWord);
addGlobalFunc('procedure TStream.WriteDWord(d : UInt32); constref', @_LapeStream_WriteDWord);
addGlobalFunc('procedure TStream.WriteAnsiString(const S : String); constref', @_LapeStream_WriteAnsiString);
addClassVar('TStream', 'Position', 'Integer', @_LapeStream_Position_Read, @_LapeStream_Position_Write);
addClassVar('TStream', 'Size', 'Integer', @_LapeStream_Size_Read, @_LapeStream_Size_Write);
addGlobalFunc('procedure TStream.Init()', @_LapeStream_Init);
addGlobalFunc('procedure TStream.Free; constref', @_LapeStream_Free);

addClass('THandleStream', 'TStream');
addGlobalFunc('procedure THandleStream.Init(AHandle: THandle)', @_LapeHandleStream_Init);
//addGlobalFunc('function THandleStream.Read(var Buffer; Count: Longint): Longint; constref', @_LapeHandleStream_Read);
// addGlobalFunc('function THandleStream.Write(constref Buffer; Count: Longint): Longint; constref', @_LapeHandleStream_Write);
addGlobalFunc('function THandleStream.Seek(const Offset: Int64; Origin: TSeekOrigin): Int64; constref', @_LapeHandleStream_Seek);
addClassVar('THandleStream', 'Handle', 'THandle', @_LapeHandleStream_Handle_Read);
// addGlobalFunc('procedure THandleStream.Free; constref', @_LapeHandleStream_Free);

addClass('TFileStream', 'THandleStream');
addGlobalFunc('procedure TFileStream.Init(const AFileName: string; Mode: Word)', @_LapeFileStream_Init);
//addGlobalFunc('procedure TFileStream.Init(const AFileName: string; Mode: Word; Rights: Cardinal); overload', @_LapeFileStream_InitEx);
addClassVar('TFileStream', 'FileName', 'String', @_LapeFileStream_FileName_Read);
//addGlobalFunc('procedure TFileStream.Free; constref', @_LapeFileStream_Free);

addClass('TCustomMemoryStream', 'TStream');
//addGlobalFunc('function TCustomMemoryStream.Read(var Buffer; Count: LongInt): LongInt; constref', @_LapeCustomMemoryStream_Read);
addGlobalFunc('function TCustomMemoryStream.Seek(const Offset: Integer; Origin: TSeekOrigin): Int64; constref', @_LapeCustomMemoryStream_Seek);
addGlobalFunc('procedure TCustomMemoryStream.SaveToStream(Stream: TStream); constref', @_LapeCustomMemoryStream_SaveToStream);
addGlobalFunc('procedure TCustomMemoryStream.SaveToFile(const FileName: string); constref', @_LapeCustomMemoryStream_SaveToFile);
addClassVar('TCustomMemoryStream', 'Memory', 'Pointer', @_LapeCustomMemoryStream_Memory_Read);
addGlobalFunc('procedure TCustomMemoryStream.Init; override', @_LapeCustomMemoryStream_Init);
// addGlobalFunc('procedure TCustomMemoryStream.Free; constref', @_LapeCustomMemoryStream_Free);

addClass('TMemoryStream', 'TCustomMemoryStream');
addGlobalFunc('procedure TMemoryStream.Clear; constref', @_LapeMemoryStream_Clear);
addGlobalFunc('procedure TMemoryStream.LoadFromStream(Stream: TStream); constref', @_LapeMemoryStream_LoadFromStream);
addGlobalFunc('procedure TMemoryStream.LoadFromFile(const FileName: string); constref', @_LapeMemoryStream_LoadFromFile);
addGlobalFunc('procedure TMemoryStream.SetSize(NewSize: PtrInt); constref', @_LapeMemoryStream_SetSize);
// addGlobalFunc('function TMemoryStream.Write(constref Buffer; Count: LongInt): LongInt; constref', @_LapeMemoryStream_Write);
addGlobalFunc('procedure TMemoryStream.Init; override', @_LapeMemoryStream_Init);
// addGlobalFunc('procedure TMemoryStream.Free; constref', @_LapeMemoryStream_Free);

addClass('TStringStream', 'TStream');
addGlobalFunc('procedure TStringStream.Init(const AString: string)', @_LapeStringStream_Init);
// addGlobalFunc('function TStringStream.Read(var Buffer; Count: Longint): Longint; constref', @_LapeStringStream_Read);
addGlobalFunc('function TStringStream.ReadString(Count: Longint): string; constref', @_LapeStringStream_ReadString);
//addGlobalFunc('function TStringStream.Seek(Offset: Longint; Origin: Word): Longint; constref', @_LapeStringStream_Seek);
// addGlobalFunc('function TStringStream.Write(constref Buffer; Count: Longint): Longint; constref', @_LapeStringStream_Write);
addGlobalFunc('procedure TStringStream.WriteString(const AString: string); constref', @_LapeStringStream_WriteString);
addClassVar('TStringStream', 'DataString', 'string', @_LapeStringStream_DataString_Read);
//addGlobalFunc('procedure TStringStream.Free; constref', @_LapeStringStream_Free);

addClass('TStrings', 'TPersistent');
addGlobalFunc('function TStrings.Add(const S: string): Integer; constref', @_LapeStrings_Add);
addGlobalFunc('function TStrings.AddObject(const S: string; AObject: TObject): Integer; constref', @_LapeStrings_AddObject);
addGlobalFunc('procedure TStrings.Append(const S: string); constref', @_LapeStrings_Append);
addGlobalFunc('procedure TStrings.AddStrings(const TheStrings: TStrings); constref; overload', @_LapeStrings_AddStrings);
addGlobalFunc('procedure TStrings.AddStrings(const TheStrings: TStringArray); constref; overload', @_LapeStrings_AddStringsArray);
// addGlobalFunc('procedure TStrings.Assign(Source: TPersistent); constref', @_LapeStrings_Assign);
addGlobalFunc('procedure TStrings.BeginUpdate; constref', @_LapeStrings_BeginUpdate);
addGlobalFunc('procedure TStrings.Clear; constref', @_LapeStrings_Clear);
addGlobalFunc('procedure TStrings.Delete(Index: Integer); constref', @_LapeStrings_Delete);
addGlobalFunc('procedure TStrings.EndUpdate; constref', @_LapeStrings_EndUpdate);
addGlobalFunc('function TStrings.Equals(TheStrings: TStrings): Boolean; constref', @_LapeStrings_Equals);
addGlobalFunc('procedure TStrings.Exchange(Index1, Index2: Integer); constref', @_LapeStrings_Exchange);
addGlobalFunc('function TStrings.IndexOf(const S: string): Integer; constref', @_LapeStrings_IndexOf);
addGlobalFunc('function TStrings.IndexOfName(const Name: string): Integer; constref', @_LapeStrings_IndexOfName);
addGlobalFunc('function TStrings.IndexOfObject(AObject: TObject): Integer; constref', @_LapeStrings_IndexOfObject);
addGlobalFunc('procedure TStrings.Insert(Index: Integer; const S: string); constref', @_LapeStrings_Insert);
addGlobalFunc('procedure TStrings.InsertObject(Index: Integer; const S: string; AObject: TObject); constref', @_LapeStrings_InsertObject);
addGlobalFunc('procedure TStrings.LoadFromFile(const FileName: string); constref', @_LapeStrings_LoadFromFile);
addGlobalFunc('procedure TStrings.LoadFromStream(Stream: TStream); constref', @_LapeStrings_LoadFromStream);
addGlobalFunc('procedure TStrings.Move(FromIndex, ToIndex: Integer); constref', @_LapeStrings_Move);
addGlobalFunc('procedure TStrings.SaveToFile(const FileName: string); constref', @_LapeStrings_SaveToFile);
addGlobalFunc('procedure TStrings.SaveToStream(Stream: TStream); constref', @_LapeStrings_SaveToStream);
addGlobalFunc('function TStrings.ToStringArray: TStringArray; constref', @_LapeStrings_ToStringArray);
addClassVar('TStrings', 'Count', 'Integer', @_LapeStrings_Count_Read);
addClassVar('TStrings', 'Objects', 'TObject', @_LapeStrings_Objects_Read, @_LapeStrings_Objects_Write, True);
addClassVar('TStrings', 'Values', 'string', @_LapeStrings_Values_Read, @_LapeStrings_Values_Write, True, 'string');
addClassVar('TStrings', 'Strings', 'string', @_LapeStrings_Strings_Read, @_LapeStrings_Strings_Write, True);
addClassVar('TStrings', 'Names', 'string', @_LapeStrings_Names_Read, nil, True);
addClassVar('TStrings', 'ValueFromIndex', 'string', @_LapeStrings_ValueFromIndex_Read, @_LapeStrings_ValueFromIndex_Write, True);
addClassVar('TStrings', 'Text', 'string', @_LapeStrings_Text_Read, @_LapeStrings_Text_Write);
addGlobalFunc('procedure TStrings.Init; override', @_LapeStrings_Init);
// addGlobalFunc('procedure TStrings.Free; constref', @_LapeStrings_Free);

addClass('TStringList', 'TStrings');
addGlobalType('function(List: TStringList; Index1, Index2: Integer): Integer', 'TStringListSortCompare');
//addGlobalFunc('function TStringList.Add(const S: string): Integer; constref', @_LapeStringList_Add);
//addGlobalFunc('procedure TStringList.Clear; constref', @_LapeStringList_Clear);
//addGlobalFunc('procedure TStringList.Delete(Index: Integer); constref', @_LapeStringList_Delete);
//addGlobalFunc('procedure TStringList.Exchange(Index1, Index2: Integer); constref', @_LapeStringList_Exchange);
addGlobalFunc('function TStringList.Find(const S: string; Out Index: Integer): Boolean; constref', @_LapeStringList_Find);
//addGlobalFunc('function TStringList.IndexOf(const S: string): Integer; constref', @_LapeStringList_IndexOf);
//addGlobalFunc('procedure TStringList.Insert(Index: Integer; const S: string); constref', @_LapeStringList_Insert);
addGlobalFunc('procedure TStringList.Sort; constref', @_LapeStringList_Sort);
addGlobalFunc('procedure TStringList.CustomSort(CompareFn: TStringListSortCompare); constref', @_LapeStringList_CustomSort);
addClassVar('TStringList', 'Sorted', 'Boolean', @_LapeStringList_Sorted_Read, @_LapeStringList_Sorted_Write);
addClassVar('TStringList', 'CaseSensitive', 'Boolean', @_LapeStringList_CaseSensitive_Read, @_LapeStringList_CaseSensitive_Write);
addClassVar('TStringList', 'OnChange', 'TNotifyEvent', @_LapeStringList_OnChange_Read, @_LapeStringList_OnChange_Write);
addClassVar('TStringList', 'OnChanging', 'TNotifyEvent', @_LapeStringList_OnChanging_Read, @_LapeStringList_OnChanging_Write);
addClassVar('TStringList', 'OwnsObjects', 'boolean', @_LapeStringList_OwnsObjects_Read, @_LapeStringList_OwnsObjects_Write);
addGlobalFunc('procedure TStringList.Init; override', @_LapeStringList_Init);
//addGlobalFunc('procedure TStringList.Free; constref', @_LapeStringList_Free);

