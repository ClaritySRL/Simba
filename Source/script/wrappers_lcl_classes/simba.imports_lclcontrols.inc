addGlobalType('(ssShift, ssAlt, ssCtrl, ssLeft, ssRight, ssMiddle, ssDouble, ssMeta, ssSuper, ssHyper, ssAltGr, ssCaps, ssNum, ssScroll, ssTriple, ssQuad, ssExtra1, ssExtra2)', 'TShiftStateEnum');
addGlobalType('set of TShiftStateEnum', 'TShiftState');
addGlobalType('procedure(Sender: TObject; var Key: Int16; Shift: TShiftState) of object', 'TKeyEvent', FFI_DEFAULT_ABI);
addGlobalType('procedure(Sender: TObject; var Key: Char) of object', 'TKeyPressEvent', FFI_DEFAULT_ABI);
addGlobalType('(mbLeft, mbRight, mbMiddle, mbExtra1, mbExtra2)', 'TMouseButton');
addGlobalType('procedure(Sender: TObject; Button: TMouseButton;Shift: TShiftState; X, Y: Integer) of object', 'TMouseEvent', FFI_DEFAULT_ABI);
addGlobalType('procedure(Sender: TObject; Shift: TShiftState; X, Y: Integer) of object', 'TMouseMoveEvent', FFI_DEFAULT_ABI);
addGlobalType('(sbHorizontal, sbVertical)', 'TScrollBarKind');
addGlobalType('(alNone, alTop, alBottom, alLeft, alRight, alClient, alCustom)', 'TAlign');
addGlobalType('(bsNone, bsSingle, bsSizeable, bsDialog, bsToolWindow, bsSizeToolWin)', 'TFormBorderStyle');
addGlobalType('Integer', 'TCursor');
addGlobalVar(crNone, 'crNone').isConstant := True;
addGlobalVar(crCross, 'crCross').isConstant := True;
addGlobalVar(crHandPoint, 'crHandPoint').isConstant := True;
addGlobalVar(crIBeam, 'crIBeam').isConstant := True;

addClass('TControl', 'TComponent');
addGlobalFunc('procedure TControl.AdjustSize; constref', @_LapeControl_AdjustSize);
addGlobalFunc('function TControl.AutoSizeDelayed: boolean; constref', @_LapeControl_AutoSizeDelayed);
addGlobalFunc('function TControl.AutoSizeDelayedReport: string; constref', @_LapeControl_AutoSizeDelayedReport);
addGlobalFunc('function TControl.AutoSizeDelayedHandle: Boolean; constref', @_LapeControl_AutoSizeDelayedHandle);
addGlobalFunc('procedure TControl.SetBounds(aLeft, aTop, aWidth, aHeight: integer); constref', @_LapeControl_SetBounds);
addGlobalFunc('procedure TControl.SetInitialBounds(aLeft, aTop, aWidth, aHeight: integer); constref', @_LapeControl_SetInitialBounds);
addGlobalFunc('procedure TControl.SetBoundsKeepBase(aLeft, aTop, aWidth, aHeight: integer); constref', @_LapeControl_SetBoundsKeepBase);
addGlobalFunc('procedure TControl.GetPreferredSize(var PreferredWidth, PreferredHeight: integer;Raw: boolean;WithThemeSpace: boolean); constref', @_LapeControl_GetPreferredSize);
addGlobalFunc('function TControl.GetDefaultWidth: integer; constref', @_LapeControl_GetDefaultWidth);
addGlobalFunc('function TControl.GetDefaultHeight: integer; constref', @_LapeControl_GetDefaultHeight);
addGlobalFunc('function TControl.GetColorResolvingParent: Integer; constref', @_LapeControl_GetColorResolvingParent);
addGlobalFunc('function TControl.GetRGBColorResolvingParent: Integer; constref', @_LapeControl_GetRGBColorResolvingParent);
addGlobalFunc('procedure TControl.InvalidatePreferredSize; constref', @_LapeControl_InvalidatePreferredSize);
addGlobalFunc('procedure TControl.UpdateBaseBounds(StoreBounds, StoreParentClientSize,UseLoadedValues: boolean); constref', @_LapeControl_UpdateBaseBounds);
addClassVar('TControl', 'BaseBounds', 'TRect', @_LapeControl_BaseBounds_Read);
addClassVar('TControl', 'ReadBounds', 'TRect', @_LapeControl_ReadBounds_Read);
addGlobalFunc('procedure TControl.WriteLayoutDebugReport(const Prefix: string); constref', @_LapeControl_WriteLayoutDebugReport);
addGlobalFunc('function TControl.ShouldAutoAdjustLeftAndTop: Boolean; constref', @_LapeControl_ShouldAutoAdjustLeftAndTop);
addGlobalFunc('function TControl.ShouldAutoAdjustWidthAndHeight: Boolean; constref', @_LapeControl_ShouldAutoAdjustWidthAndHeight);
addGlobalFunc('procedure TControl.Init(TheOwner: TComponent); override', @_LapeControl_Init);
addGlobalFunc('procedure TControl.BeforeDestruction; constref', @_LapeControl_BeforeDestruction);
addGlobalFunc('procedure TControl.EditingDone; constref', @_LapeControl_EditingDone);
addGlobalFunc('procedure TControl.ExecuteDefaultAction; constref', @_LapeControl_ExecuteDefaultAction);
addGlobalFunc('procedure TControl.ExecuteCancelAction; constref', @_LapeControl_ExecuteCancelAction);
addGlobalFunc('procedure TControl.BringToFront; constref', @_LapeControl_BringToFront);
addGlobalFunc('function TControl.HasParent: Boolean; constref', @_LapeControl_HasParent);
addGlobalFunc('function TControl.GetParentComponent: TComponent; constref', @_LapeControl_GetParentComponent);
addGlobalFunc('function TControl.IsParentOf(AControl: TControl): boolean; constref', @_LapeControl_IsParentOf);
addGlobalFunc('function TControl.GetTopParent: TControl; constref', @_LapeControl_GetTopParent);
addGlobalFunc('function TControl.IsVisible: Boolean; constref', @_LapeControl_IsVisible);
addGlobalFunc('function TControl.IsControlVisible: Boolean; constref', @_LapeControl_IsControlVisible);
addGlobalFunc('function TControl.IsEnabled: Boolean; constref', @_LapeControl_IsEnabled);
addGlobalFunc('function TControl.IsParentColor: Boolean; constref', @_LapeControl_IsParentColor);
addGlobalFunc('function TControl.IsParentFont: Boolean; constref', @_LapeControl_IsParentFont);
addGlobalFunc('function TControl.FormIsUpdating: boolean; constref', @_LapeControl_FormIsUpdating);
addGlobalFunc('function TControl.IsProcessingPaintMsg: boolean; constref', @_LapeControl_IsProcessingPaintMsg);
addGlobalFunc('procedure TControl.Hide; constref', @_LapeControl_Hide);
addGlobalFunc('procedure TControl.Refresh; constref', @_LapeControl_Refresh);
addGlobalFunc('procedure TControl.Repaint; constref', @_LapeControl_Repaint);
addGlobalFunc('procedure TControl.Invalidate; constref', @_LapeControl_Invalidate);
addGlobalFunc('procedure TControl.SendToBack; constref', @_LapeControl_SendToBack);
addGlobalFunc('procedure TControl.UpdateRolesForForm; constref', @_LapeControl_UpdateRolesForForm);
addGlobalFunc('procedure TControl.ActiveDefaultControlChanged(NewControl: TControl); constref', @_LapeControl_ActiveDefaultControlChanged);
addGlobalFunc('function TControl.GetTextBuf(Buffer: PChar; BufSize: Integer): Integer; constref', @_LapeControl_GetTextBuf);
addGlobalFunc('function TControl.GetTextLen: Integer; constref', @_LapeControl_GetTextLen);
addGlobalFunc('procedure TControl.SetTextBuf(Buffer: PChar); constref', @_LapeControl_SetTextBuf);
addGlobalFunc('function TControl.ScreenToClient(const APoint: TPoint): TPoint; constref', @_LapeControl_ScreenToClient);
addGlobalFunc('function TControl.ClientToScreen(const APoint: TPoint): TPoint; constref', @_LapeControl_ClientToScreen);
addGlobalFunc('function TControl.ScreenToControl(const APoint: TPoint): TPoint; constref', @_LapeControl_ScreenToControl);
addGlobalFunc('function TControl.ControlToScreen(const APoint: TPoint): TPoint; constref', @_LapeControl_ControlToScreen);
addGlobalFunc('function TControl.GetChildsRect(Scrolled: boolean): TRect; constref', @_LapeControl_GetChildsRect);
addGlobalFunc('procedure TControl.Show; constref', @_LapeControl_Show);
addGlobalFunc('procedure TControl.Update; constref', @_LapeControl_Update);
addGlobalFunc('function TControl.HandleObjectShouldBeVisible: boolean; constref', @_LapeControl_HandleObjectShouldBeVisible);
addGlobalFunc('function TControl.ParentDestroyingHandle: boolean; constref', @_LapeControl_ParentDestroyingHandle);
addGlobalFunc('function TControl.ParentHandlesAllocated: boolean; constref', @_LapeControl_ParentHandlesAllocated);
addGlobalFunc('procedure TControl.InitiateAction; constref', @_LapeControl_InitiateAction);
addClassVar('TControl', 'Cursor', 'TCursor', @_LapeControl_Cursor_Read, @_LapeControl_Cursor_Write);
addClassVar('TControl', 'Align', 'TAlign', @_LapeControl_Align_Read, @_LapeControl_Align_Write);
addClassVar('TControl', 'AutoSize', 'Boolean', @_LapeControl_AutoSize_Read, @_LapeControl_AutoSize_Write);
addClassVar('TControl', 'BoundsRect', 'TRect', @_LapeControl_BoundsRect_Read, @_LapeControl_BoundsRect_Write);
addClassVar('TControl', 'BoundsRectForNewParent', 'TRect', @_LapeControl_BoundsRectForNewParent_Read, @_LapeControl_BoundsRectForNewParent_Write);
addClassVar('TControl', 'Caption', 'String', @_LapeControl_Caption_Read, @_LapeControl_Caption_Write);
addClassVar('TControl', 'ClientHeight', 'Integer', @_LapeControl_ClientHeight_Read, @_LapeControl_ClientHeight_Write);
addClassVar('TControl', 'ClientOrigin', 'TPoint', @_LapeControl_ClientOrigin_Read);
addClassVar('TControl', 'ClientRect', 'TRect', @_LapeControl_ClientRect_Read);
addClassVar('TControl', 'ClientWidth', 'Integer', @_LapeControl_ClientWidth_Read, @_LapeControl_ClientWidth_Write);
addClassVar('TControl', 'Color', 'Integer', @_LapeControl_Color_Read, @_LapeControl_Color_Write);
addClassVar('TControl', 'ControlOrigin', 'TPoint', @_LapeControl_ControlOrigin_Read);
addClassVar('TControl', 'Enabled', 'Boolean', @_LapeControl_Enabled_Read, @_LapeControl_Enabled_Write);
addClassVar('TControl', 'Font', 'TFont', @_LapeControl_Font_Read, @_LapeControl_Font_Write);
addClassVar('TControl', 'IsControl', 'Boolean', @_LapeControl_IsControl_Read, @_LapeControl_IsControl_Write);
addClassVar('TControl', 'MouseEntered', 'Boolean', @_LapeControl_MouseEntered_Read);
addClassVar('TControl', 'OnChangeBounds', 'TNotifyEvent', @_LapeControl_OnChangeBounds_Read, @_LapeControl_OnChangeBounds_Write);
addClassVar('TControl', 'OnClick', 'TNotifyEvent', @_LapeControl_OnClick_Read, @_LapeControl_OnClick_Write);
addClassVar('TControl', 'OnResize', 'TNotifyEvent', @_LapeControl_OnResize_Read, @_LapeControl_OnResize_Write);
addClassVar('TControl', 'Visible', 'Boolean', @_LapeControl_Visible_Read, @_LapeControl_Visible_Write);
addClassVar('TControl', 'ShowHint', 'Boolean', @_LapeControl_ShowHint_Read, @_LapeControl_ShowHint_Write);
addGlobalFunc('function TControl.UseRightToLeftAlignment: Boolean; constref', @_LapeControl_UseRightToLeftAlignment);
addGlobalFunc('function TControl.UseRightToLeftReading: Boolean; constref', @_LapeControl_UseRightToLeftReading);
addGlobalFunc('function TControl.UseRightToLeftScrollBar: Boolean; constref', @_LapeControl_UseRightToLeftScrollBar);
addGlobalFunc('function TControl.IsRightToLeft: Boolean; constref', @_LapeControl_IsRightToLeft);
addClassVar('TControl', 'Left', 'Integer', @_LapeControl_Left_Read, @_LapeControl_Left_Write);
addClassVar('TControl', 'Height', 'Integer', @_LapeControl_Height_Read, @_LapeControl_Height_Write);
addClassVar('TControl', 'Top', 'Integer', @_LapeControl_Top_Read, @_LapeControl_Top_Write);
addClassVar('TControl', 'Width', 'Integer', @_LapeControl_Width_Read, @_LapeControl_Width_Write);
addGlobalFunc('procedure TControl.ShowHint; constref', @_LapeControl_ShowHint);
addClassVar('TControl', 'Hint', 'String', @_LapeControl_Hint_Read, @_LapeControl_Hint_Write);
addClassVar('TControl', 'Parent', 'TControl', @_LapeControl_Parent_Read, @_LapeControl_Parent_Write); //FIXME: Should be OS-Depend TControl
// addGlobalFunc('procedure TControl.Free; constref', @_LapeControl_Free);

addClass('TWinControl', 'TControl');
addClassVar('TWinControl', 'BorderWidth', 'integer', @_LapeWinControl_BorderWidth_Read, @_LapeWinControl_BorderWidth_Write);
addClassVar('TWinControl', 'BoundsLockCount', 'integer', @_LapeWinControl_BoundsLockCount_Read);
addClassVar('TWinControl', 'Brush', 'TBrush', @_LapeWinControl_Brush_Read);
addClassVar('TWinControl', 'CachedClientHeight', 'integer', @_LapeWinControl_CachedClientHeight_Read);
addClassVar('TWinControl', 'CachedClientWidth', 'integer', @_LapeWinControl_CachedClientWidth_Read);
addClassVar('TWinControl', 'ControlCount', 'Integer', @_LapeWinControl_ControlCount_Read);
addClassVar('TWinControl', 'DoubleBuffered', 'Boolean', @_LapeWinControl_DoubleBuffered_Read, @_LapeWinControl_DoubleBuffered_Write);
addClassVar('TWinControl', 'Handle', 'THandle', @_LapeWinControl_Handle_Read, @_LapeWinControl_Handle_Write);
addClassVar('TWinControl', 'IsResizing', 'Boolean', @_LapeWinControl_IsResizing_Read);
addClassVar('TWinControl', 'TabOrder', 'Integer', @_LapeWinControl_TabOrder_Read, @_LapeWinControl_TabOrder_Write);
addClassVar('TWinControl', 'TabStop', 'Boolean', @_LapeWinControl_TabStop_Read, @_LapeWinControl_TabStop_Write);
addClassVar('TWinControl', 'OnEnter', 'TNotifyEvent', @_LapeWinControl_OnEnter_Read, @_LapeWinControl_OnEnter_Write);
addClassVar('TWinControl', 'OnExit', 'TNotifyEvent', @_LapeWinControl_OnExit_Read, @_LapeWinControl_OnExit_Write);
addClassVar('TWinControl', 'OnKeyDown', 'TKeyEvent', nil, @_LapeWinControl_OnKeyDown_Write);
addClassVar('TWinControl', 'OnKeyPress', 'TKeyPressEvent', nil, @_LapeWinControl_OnKeyPress_Write);
addClassVar('TWinControl', 'OnKeyUp', 'TKeyEvent', nil, @_LapeWinControl_OnKeyUp_Write);
addClassVar('TWinControl', 'ParentWindow', 'THandle', @_LapeWinControl_ParentWindow_Read, @_LapeWinControl_ParentWindow_Write);
addClassVar('TWinControl', 'Showing', 'Boolean', @_LapeWinControl_Showing_Read);
addClassVar('TWinControl', 'VisibleDockClientCount', 'Integer', @_LapeWinControl_VisibleDockClientCount_Read, nil);
//addGlobalFunc('function TWinControl.AutoSizeDelayed: boolean; constref', @_LapeWinControl_AutoSizeDelayed);
//addGlobalFunc('function TWinControl.AutoSizeDelayedReport: string; constref', @_LapeWinControl_AutoSizeDelayedReport);
//addGlobalFunc('function TWinControl.AutoSizeDelayedHandle: Boolean; constref', @_LapeWinControl_AutoSizeDelayedHandle);
addGlobalFunc('procedure TWinControl.BeginUpdateBounds; constref', @_LapeWinControl_BeginUpdateBounds);
addGlobalFunc('procedure TWinControl.EndUpdateBounds; constref', @_LapeWinControl_EndUpdateBounds);
addGlobalFunc('procedure TWinControl.LockRealizeBounds; constref', @_LapeWinControl_LockRealizeBounds);
addGlobalFunc('procedure TWinControl.UnlockRealizeBounds; constref', @_LapeWinControl_UnlockRealizeBounds);
addGlobalFunc('function TWinControl.ControlAtPos(const Pos: TPoint; AllowDisabled: Boolean): TControl; constref', @_LapeWinControl_ControlAtPos);
addGlobalFunc('function TWinControl.ControlAtPos(const Pos: TPoint;AllowDisabled, AllowWinControls: Boolean): TControl; constref; overload', @_LapeWinControl_ControlAtPosEx);
addGlobalFunc('function TWinControl.ContainsControl(Control: TControl): Boolean; constref', @_LapeWinControl_ContainsControl);
addGlobalFunc('procedure TWinControl.DoAdjustClientRectChange(const InvalidateRect: Boolean); constref', @_LapeWinControl_DoAdjustClientRectChange);
addGlobalFunc('procedure TWinControl.InvalidateClientRectCache(WithChildControls: boolean); constref', @_LapeWinControl_InvalidateClientRectCache);
addGlobalFunc('function TWinControl.ClientRectNeedsInterfaceUpdate: boolean; constref', @_LapeWinControl_ClientRectNeedsInterfaceUpdate);
//addGlobalFunc('procedure TWinControl.SetBounds(ALeft, ATop, AWidth, AHeight: integer); constref', @_LapeWinControl_SetBounds);
//addGlobalFunc('function TWinControl.GetChildsRect(Scrolled: boolean): TRect; constref', @_LapeWinControl_GetChildsRect);
addGlobalFunc('procedure TWinControl.DisableAlign; constref', @_LapeWinControl_DisableAlign);
addGlobalFunc('procedure TWinControl.EnableAlign; constref', @_LapeWinControl_EnableAlign);
addGlobalFunc('procedure TWinControl.ReAlign; constref', @_LapeWinControl_ReAlign);
addGlobalFunc('procedure TWinControl.ScrollBy(DeltaX, DeltaY: Integer); constref', @_LapeWinControl_ScrollBy);
//addGlobalFunc('procedure TWinControl.WriteLayoutDebugReport(const Prefix: string); constref', @_LapeWinControl_WriteLayoutDebugReport);
addGlobalFunc('procedure TWinControl.Init(TheOwner: TComponent); override', @_LapeWinControl_Init);
addGlobalFunc('procedure TWinControl.CreateParented(AParentWindow: Thandle); constref', @_LapeWinControl_CreateParented);
addGlobalFunc('function TWinControl.CanFocus: Boolean; constref', @_LapeWinControl_CanFocus);
addGlobalFunc('function TWinControl.GetControlIndex(AControl: TControl): integer; constref', @_LapeWinControl_GetControlIndex);
addGlobalFunc('procedure TWinControl.SetControlIndex(AControl: TControl; NewIndex: integer); constref', @_LapeWinControl_SetControlIndex);
addGlobalFunc('function TWinControl.Focused: Boolean; constref', @_LapeWinControl_Focused);
addGlobalFunc('function TWinControl.PerformTab(ForwardTab: boolean): boolean; constref', @_LapeWinControl_PerformTab);
addGlobalFunc('function TWinControl.FindChildControl(const ControlName: String): TControl; constref', @_LapeWinControl_FindChildControl);
addGlobalFunc('procedure TWinControl.SelectNext(CurControl: TWinControl;GoForward, CheckTabStop: Boolean); constref', @_LapeWinControl_SelectNext);
//addGlobalFunc('function TWinControl.GetTextLen: Integer; constref', @_LapeWinControl_GetTextLen);
//addGlobalFunc('procedure TWinControl.Invalidate; constref', @_LapeWinControl_Invalidate);
addGlobalFunc('procedure TWinControl.AddControl; constref', @_LapeWinControl_AddControl);
addGlobalFunc('procedure TWinControl.InsertControl(AControl: TControl); constref', @_LapeWinControl_InsertControl);
addGlobalFunc('procedure TWinControl.InsertControl(AControl: TControl; Index: integer); constref; overload', @_LapeWinControl_InsertControlEx);
addGlobalFunc('procedure TWinControl.RemoveControl(AControl: TControl); constref', @_LapeWinControl_RemoveControl);
//addGlobalFunc('procedure TWinControl.Repaint; constref', @_LapeWinControl_Repaint);
//addGlobalFunc('procedure TWinControl.Update; constref', @_LapeWinControl_Update);
addGlobalFunc('procedure TWinControl.SetFocus; constref', @_LapeWinControl_SetFocus);
addGlobalFunc('procedure TWinControl.FlipChildren(AllLevels: Boolean); constref', @_LapeWinControl_FlipChildren);
addGlobalFunc('procedure TWinControl.ScaleBy(Multiplier, Divider: Integer); constref', @_LapeWinControl_ScaleBy);
addGlobalFunc('function TWinControl.GetDockCaption(AControl: TControl): String; constref', @_LapeWinControl_GetDockCaption);
addGlobalFunc('procedure TWinControl.UpdateDockCaption(Exclude: TControl); constref', @_LapeWinControl_UpdateDockCaption);
addGlobalFunc('function TWinControl.HandleAllocated: Boolean; constref', @_LapeWinControl_HandleAllocated);
//addGlobalFunc('function TWinControl.ParentHandlesAllocated: boolean; constref', @_LapeWinControl_ParentHandlesAllocated);
addGlobalFunc('procedure TWinControl.HandleNeeded; constref', @_LapeWinControl_HandleNeeded);
addGlobalFunc('function TWinControl.BrushCreated: Boolean; constref', @_LapeWinControl_BrushCreated);
addGlobalFunc('procedure TWinControl.PaintTo(ACanvas: TCanvas; X, Y: Integer); constref', @_LapeWinControl_PaintTo);
addGlobalFunc('procedure TWinControl.SetShape(AShape: TBitmap); constref', @_LapeWinControl_SetShape);
//addGlobalFunc('procedure TWinControl.Free; constref', @_LapeWinControl_Free);

addClass('TCustomControl', 'TWinControl');
addGlobalFunc('procedure TCustomControl.Init(AOwner: TComponent); override', @_LapeCustomControl_Init);
addClassVar('TCustomControl', 'Canvas', 'TCanvas', @_LapeCustomControl_Canvas_Read, @_LapeCustomControl_Canvas_Write);
addClassVar('TCustomControl', 'OnPaint', 'TNotifyEvent', @_LapeCustomControl_OnPaint_Read, @_LapeCustomControl_OnPaint_Write);
addClassVar('TCustomControl', 'BorderStyle', 'TFormBorderStyle', nil, @_LapeCustomControl_BorderStyle_Write);
//addGlobalFunc('procedure TCustomControl.Free; constref', @_LapeCustomControl_Free);

addClass('TControlScrollBar', 'TPersistent');
addGlobalFunc('procedure TControlScrollBar.Init(AControl: TWinControl; AKind: TScrollBarKind)', @_LapeControlScrollBar_Init);
//addGlobalFunc('procedure TControlScrollBar.Assign(Source: TPersistent); constref', @_LapeControlScrollBar_Assign);
addGlobalFunc('function TControlScrollBar.IsScrollBarVisible: Boolean; constref', @_LapeControlScrollBar_IsScrollBarVisible);
addGlobalFunc('function TControlScrollBar.ScrollPos: Integer; constref', @_LapeControlScrollBar_ScrollPos);
addGlobalFunc('function TControlScrollBar.GetOtherScrollBar: TControlScrollBar; constref', @_LapeControlScrollBar_GetOtherScrollBar);
addClassVar('TControlScrollBar', 'Size', 'integer', @_LapeControlScrollBar_Size_Read);
addGlobalFunc('function TControlScrollBar.ClientSize: integer; constref', @_LapeControlScrollBar_ClientSize);
addGlobalFunc('function TControlScrollBar.ClientSizeWithBar: integer; constref', @_LapeControlScrollBar_ClientSizeWithBar);
addGlobalFunc('function TControlScrollBar.ClientSizeWithoutBar: integer; constref', @_LapeControlScrollBar_ClientSizeWithoutBar);
addClassVar('TControlScrollBar', 'Increment', 'Integer', @_LapeControlScrollBar_Increment_Read, @_LapeControlScrollBar_Increment_Write);
addClassVar('TControlScrollBar', 'Page', 'Integer', @_LapeControlScrollBar_Page_Read, @_LapeControlScrollBar_Page_Write);
addClassVar('TControlScrollBar', 'Smooth', 'Boolean', @_LapeControlScrollBar_Smooth_Read, @_LapeControlScrollBar_Smooth_Write);
addClassVar('TControlScrollBar', 'Position', 'Integer', @_LapeControlScrollBar_Position_Read, @_LapeControlScrollBar_Position_Write);
addClassVar('TControlScrollBar', 'Range', 'Integer', @_LapeControlScrollBar_Range_Read, @_LapeControlScrollBar_Range_Write);
addClassVar('TControlScrollBar', 'Tracking', 'Boolean', @_LapeControlScrollBar_Tracking_Read, @_LapeControlScrollBar_Tracking_Write);
addClassVar('TControlScrollBar', 'Visible', 'Boolean', @_LapeControlScrollBar_Visible_Read, @_LapeControlScrollBar_Visible_Write);
//addGlobalFunc('procedure TControlScrollBar.Free; constref', @_LapeControlScrollBar_Free);

addClass('TScrollingWinControl', 'TCustomControl');
addGlobalFunc('procedure TScrollingWinControl.Init(TheOwner : TComponent); override', @_LapeScrollingWinControl_Init);
addGlobalFunc('procedure TScrollingWinControl.UpdateScrollbars; constref', @_LapeScrollingWinControl_UpdateScrollbars);
//addGlobalFunc('procedure TScrollingWinControl.ScrollBy(DeltaX, DeltaY: Integer); constref', @_LapeScrollingWinControl_ScrollBy);
addClassVar('TScrollingWinControl', 'HorzScrollBar', 'TControlScrollBar', @_LapeScrollingWinControl_HorzScrollBar_Read, @_LapeScrollingWinControl_HorzScrollBar_Write);
addClassVar('TScrollingWinControl', 'VertScrollBar', 'TControlScrollBar', @_LapeScrollingWinControl_VertScrollBar_Read, @_LapeScrollingWinControl_VertScrollBar_Write);
//addGlobalFunc('procedure TScrollingWinControl.Free; constref', @_LapeScrollingWinControl_Free);

addClass('TGraphicControl', 'TControl');
//addGlobalFunc('procedure TGraphicControl.Update; constref', @_LapeGraphicControl_Update);
addClassVar('TGraphicControl', 'Canvas', 'TCanvas', @_LapeGraphicControl_Canvas_Read);
addClassVar('TGraphicControl', 'Alignment', 'TAlign', @_LapeGraphicControl_Align_Read, @_LapeGraphicControl_Align_Write);

