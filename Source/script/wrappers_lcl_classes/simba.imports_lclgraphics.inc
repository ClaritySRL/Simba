pushSection('Classes');

addGlobalType('record Left,Top,Right,Bottom : Integer;end', 'TRect');
addGlobalType('(fsBold, fsItalic, fsStrikeOut, fsUnderline)', 'TFontStyle');
addGlobalType('(fqDefault, fqDraft, fqProof, fqNonAntialiased, fqAntialiased, fqCleartype, fqCleartypeNatural)', 'TFontQuality');
addGlobalType('set of TFontStyle', 'TFontStyles');
addGlobalType('(fpDefault, fpVariable, fpFixed)', 'TFontPitch');
addGlobalType('integer', 'TCopyMode');
addGlobalType('(psSolid, psDash, psDot, psDashDot, psDashDotDot, psinsideFrame, psPattern,psClear)', 'TPenStyle');
addGlobalType('(pmBlack, pmWhite, pmNop, pmNot, pmCopy, pmNotCopy,pmMergePenNot, pmMaskPenNot, pmMergeNotPen, pmMaskNotPen, pmMerge,pmNotMerge, pmMask, pmNotMask, pmXor, pmNotXor)', 'TPenMode');
addGlobalType('(bsSolid, bsClear, bsHorizontal, bsVertical, bsFDiagonal,bsBDiagonal, bsCross, bsDiagCross, bsImage, bsPattern)', 'TBrushStyle');
addGlobalType('(fsSurface,fsBorder)', 'TFillStyle');
addGlobalType('(tmAuto, tmFixed)', 'TTransparentMode');
addGlobalType('(amDontCare, amOn, amOff)', 'TAntialiasingMode');

addClass('TGraphicsObject', 'TPersistent');
addClassVar('TGraphicsObject', 'OnChanging', 'TNotifyEvent', @_LapeGraphicsObject_OnChanging_Read, @_LapeGraphicsObject_OnChanging_Write);
addClassVar('TGraphicsObject', 'OnChange', 'TNotifyEvent', @_LapeGraphicsObject_OnChange_Read, @_LapeGraphicsObject_OnChange_Write);
addGlobalFunc('procedure TGraphicsObject.Init; override', @_LapeGraphicsObject_Init);
//addGlobalFunc('procedure TGraphicsObject.Free;', @_LapeGraphicsObject_Free);

addClass('TFont', 'TGraphicsObject');
addGlobalFunc('procedure TFont.Init; override', @_LapeFont_Init);
// addGlobalFunc('procedure TFont.Assign(Source: TPersistent);', @_LapeFont_Assign);
addGlobalFunc('procedure TFont.BeginUpdate;', @_LapeFont_BeginUpdate);
addGlobalFunc('procedure TFont.EndUpdate;', @_LapeFont_EndUpdate);
addGlobalFunc('function TFont.HandleAllocated: boolean;', @_LapeFont_HandleAllocated);
addClassVar('TFont', 'Handle', 'THandle', @_LapeFont_Handle_Read, @_LapeFont_Handle_Write);
addGlobalFunc('function TFont.IsDefault: boolean;', @_LapeFont_IsDefault);
addGlobalFunc('function TFont.IsEqual(AFont: TFont): boolean;', @_LapeFont_IsEqual);
addClassVar('TFont', 'IsMonoSpace', 'boolean', @_LapeFont_IsMonoSpace_Read);
addGlobalFunc('procedure TFont.SetDefault;', @_LapeFont_SetDefault);
addClassVar('TFont', 'PixelsPerInch', 'Integer', @_LapeFont_PixelsPerInch_Read, @_LapeFont_PixelsPerInch_Write);
addClassVar('TFont', 'Color', 'TColor', @_LapeFont_Color_Read, @_LapeFont_Color_Write);
addClassVar('TFont', 'Height', 'Integer', @_LapeFont_Height_Read, @_LapeFont_Height_Write);
addClassVar('TFont', 'Name', 'string', @_LapeFont_Name_Read, @_LapeFont_Name_Write);
addClassVar('TFont', 'Orientation', 'Integer', @_LapeFont_Orientation_Read, @_LapeFont_Orientation_Write);
addClassVar('TFont', 'Pitch', 'TFontPitch', @_LapeFont_Pitch_Read, @_LapeFont_Pitch_Write);
addClassVar('TFont', 'Size', 'Integer', @_LapeFont_Size_Read, @_LapeFont_Size_Write);
addClassVar('TFont', 'Style', 'TFontStyles', @_LapeFont_Style_Read, @_LapeFont_Style_Write);
addClassVar('TFont', 'Quality', 'TFontQuality', @_LapeFont_Quality_Read, @_LapeFont_Quality_Write);
//addGlobalFunc('procedure TFont.Free;', @_LapeFont_Free);

addClass('TPen', 'TGraphicsObject');
addGlobalFunc('procedure TPen.Init; override', @_LapePen_Init);
// addGlobalFunc('procedure TPen.Assign(Source: TPersistent);', @_LapePen_Assign);
addClassVar('TPen', 'Handle', 'THandle', @_LapePen_Handle_Read, @_LapePen_Handle_Write);
addClassVar('TPen', 'Color', 'Integer', @_LapePen_Color_Read, @_LapePen_Color_Write);
addClassVar('TPen', 'Cosmetic', 'Boolean', @_LapePen_Cosmetic_Read, @_LapePen_Cosmetic_Write);
addClassVar('TPen', 'Mode', 'TPenMode', @_LapePen_Mode_Read, @_LapePen_Mode_Write);
addClassVar('TPen', 'Style', 'TPenStyle', @_LapePen_Style_Read, @_LapePen_Style_Write);
addClassVar('TPen', 'Width', 'integer', @_LapePen_Width_Read, @_LapePen_Width_Write);
// addGlobalFunc('procedure TPen.Free;', @_LapePen_Free);

addClass('TBrush', 'TGraphicsObject');
//addGlobalFunc('procedure TBrush.Assign(Source: TPersistent);', @_LapeBrush_Assign);
addGlobalFunc('procedure TBrush.Init; override', @_LapeBrush_Init);
addClassVar('TBrush', 'Color', 'Integer', @_LapeBrush_Color_Read, @_LapeBrush_Color_Write);
addClassVar('TBrush', 'Style', 'TBrushStyle', @_LapeBrush_Style_Read, @_LapeBrush_Style_Write);
//addGlobalFunc('procedure TBrush.Free;', @_LapeBrush_Free);

addClass('TGraphic', 'TPersistent');
// addGlobalFunc('procedure TGraphic.Assign(ASource: TPersistent);', @_LapeGraphic_Assign);
addGlobalFunc('procedure TGraphic.Init; override', @_LapeGraphic_Init);
addGlobalFunc('procedure TGraphic.Clear;', @_LapeGraphic_Clear);
addGlobalFunc('procedure TGraphic.LoadFromFile(const Filename: string);', @_LapeGraphic_LoadFromFile);
addGlobalFunc('procedure TGraphic.SaveToFile(const Filename: string);', @_LapeGraphic_SaveToFile);
addGlobalFunc('procedure TGraphic.LoadFromClipboardFormat;', @_LapeGraphic_LoadFromClipboardFormat);
addClassVar('TGraphic', 'Empty', 'Boolean', @_LapeGraphic_Empty_Read);
addClassVar('TGraphic', 'Height', 'Integer', @_LapeGraphic_Height_Read, @_LapeGraphic_Height_Write);
addClassVar('TGraphic', 'Modified', 'Boolean', @_LapeGraphic_Modified_Read, @_LapeGraphic_Modified_Write);
addClassVar('TGraphic', 'OnChange', 'TNotifyEvent', @_LapeGraphic_OnChange_Read, @_LapeGraphic_OnChange_Write);
addClassVar('TGraphic', 'Palette', 'Integer', @_LapeGraphic_Palette_Read, @_LapeGraphic_Palette_Write);
addClassVar('TGraphic', 'PaletteModified', 'Boolean', @_LapeGraphic_PaletteModified_Read, @_LapeGraphic_PaletteModified_Write);
addClassVar('TGraphic', 'Transparent', 'Boolean', @_LapeGraphic_Transparent_Read, @_LapeGraphic_Transparent_Write);
addClassVar('TGraphic', 'Width', 'Integer', @_LapeGraphic_Width_Read, @_LapeGraphic_Width_Write);
//  addGlobalFunc('procedure TGraphic.Free;', @_LapeGraphic_Free);

addClass('TCanvas', 'TPersistent');
addGlobalFunc('procedure TCanvas.Lock;', @_LapeCanvas_Lock);
addGlobalFunc('function TCanvas.TryLock: Boolean;', @_LapeCanvas_TryLock);
addGlobalFunc('procedure TCanvas.Unlock;', @_LapeCanvas_Unlock);
addGlobalFunc('procedure TCanvas.Refresh;', @_LapeCanvas_Refresh);
addGlobalFunc('procedure TCanvas.Changing;', @_LapeCanvas_Changing);
addGlobalFunc('procedure TCanvas.Changed;', @_LapeCanvas_Changed);
addGlobalFunc('procedure TCanvas.SaveHandleState;', @_LapeCanvas_SaveHandleState);
addGlobalFunc('procedure TCanvas.RestoreHandleState;', @_LapeCanvas_RestoreHandleState);
addGlobalFunc('procedure TCanvas.Arc(ALeft, ATop, ARight, ABottom, SX, SY, EX, EY: Integer);', @_LapeCanvas_Arc);
addGlobalFunc('procedure TCanvas.Chord(x1, y1, x2, y2, SX, SY, EX, EY: Integer);', @_LapeCanvas_Chord);
addGlobalFunc('procedure TCanvas.CopyRect(Dest: TRect; SrcCanvas: TCanvas;Source: TRect);', @_LapeCanvas_CopyRect);
addGlobalFunc('procedure TCanvas.Draw(X,Y: Integer; SrcGraphic: TGraphic);', @_LapeCanvas_Draw);
addGlobalFunc('procedure TCanvas.DrawFocusRect(ARect: TRect);', @_LapeCanvas_DrawFocusRect);
addGlobalFunc('procedure TCanvas.Ellipse(x1, y1, x2, y2: Integer);', @_LapeCanvas_Ellipse);
addGlobalFunc('procedure TCanvas.FillRect(X1,Y1,X2,Y2: Integer);', @_LapeCanvas_FillRect);
addGlobalFunc('procedure TCanvas.FloodFill(X, Y: Integer; FillColor: TColor;FillStyle: TFillStyle);', @_LapeCanvas_FloodFill);
addGlobalFunc('procedure TCanvas.RadialPie(x1, y1, x2, y2, StartAngle16Deg, Angle16DegLength: Integer);', @_LapeCanvas_RadialPie);
addGlobalFunc('procedure TCanvas.Pie(EllipseX1,EllipseY1,EllipseX2,EllipseY2, StartX,StartY,EndX,EndY: Integer);', @_LapeCanvas_Pie);
addGlobalFunc('procedure TCanvas.PolyBezier(Points: TPointArray;Filled: boolean; Continuous: boolean); overload', @_LapeCanvas_PolyBezierEx);
addGlobalFunc('procedure TCanvas.Polygon(Points: TPointArray;Winding: Boolean;StartIndex: Integer; NumPts: Integer);', @_LapeCanvas_Polygon);
addGlobalFunc('procedure TCanvas.Polygon(Points: TPointArray); overload', @_LapeCanvas_PolygonExEx);
addGlobalFunc('procedure TCanvas.Polyline(Points: TPointArray;StartIndex: Integer;NumPts: Integer);', @_LapeCanvas_Polyline);
addGlobalFunc('procedure TCanvas.Polyline(Points: TPointArray); overload', @_LapeCanvas_PolylineExEx);
addGlobalFunc('procedure TCanvas.Rectangle(X1,Y1,X2,Y2: Integer);', @_LapeCanvas_Rectangle);
addGlobalFunc('procedure TCanvas.Rectangle(ARect: TRect); overload', @_LapeCanvas_RectangleEx);
addGlobalFunc('procedure TCanvas.RoundRect(X1, Y1, X2, Y2: Integer; RX,RY: Integer);', @_LapeCanvas_RoundRect);
addGlobalFunc('procedure TCanvas.RoundRect(Rect: TRect; RX,RY: Integer); overload', @_LapeCanvas_RoundRectEx);
addGlobalFunc('procedure TCanvas.TextOut(X,Y: Integer;  Text: String);', @_LapeCanvas_TextOut);
addGlobalFunc('procedure TCanvas.TextRect(ARect: TRect; X, Y: integer;  Text: string);', @_LapeCanvas_TextRect);
addGlobalFunc('function TCanvas.TextHeight(Text: string): Integer;', @_LapeCanvas_TextHeight);
addGlobalFunc('function TCanvas.TextWidth(Text: string): Integer;', @_LapeCanvas_TextWidth);
addGlobalFunc('function TCanvas.HandleAllocated: Boolean;', @_LapeCanvas_HandleAllocated);
addGlobalFunc('function TCanvas.GetPixel(x, y: integer): TColor;', @_LapeCanvas_Get_Pixel);
addGlobalFunc('procedure TCanvas.SetPixel(x, y: integer; Colour: TColor);', @_LapeCanvas_Set_Pixel);
addGlobalFunc('procedure TCanvas.SetPixels(TPA: TPointArray; Colour: TColor);', @_LapeCanvas_Set_Pixels);
addGlobalFunc('procedure TCanvas.SetPixels(TPA: TPointArray; Cols: TIntegerArray); overload', @_LapeCanvas_SetPixels);
addGlobalFunc('function TCanvas.GetPixels(const TPA: TPointArray): TIntegerArray;', @_LapeCanvas_GetPixels);
addGlobalFunc('procedure TCanvas.Clear;', @_LapeCanvas_Clear);
addGlobalFunc('procedure TCanvas.MoveTo(x, y: Integer);', @_LapeCanvas_MoveTo);
addGlobalFunc('procedure TCanvas.LineTo(x, y: Integer);', @_LapeCanvas_LineTo);
addGlobalFunc('procedure TCanvas.Frame3D(var ARect: TRect; TopColor, BottomColor: TColor; const FrameWidth: integer);', @_LapeCanvas_Frame3D);
addGlobalFunc('procedure TCanvas.Frame(X1, Y1, X2, Y2: Integer);', @_LapeCanvas_Frame);
addClassVar('TCanvas', 'AutoRedraw', 'Boolean', @_LapeCanvas_AutoRedraw_Read, @_LapeCanvas_AutoRedraw_Write);
addClassVar('TCanvas', 'Brush', 'TBrush', @_LapeCanvas_Brush_Read, @_LapeCanvas_Brush_Write);
addClassVar('TCanvas', 'CopyMode', 'TCopyMode', @_LapeCanvas_CopyMode_Read, @_LapeCanvas_CopyMode_Write);
addClassVar('TCanvas', 'Font', 'TFont', @_LapeCanvas_Font_Read, @_LapeCanvas_Font_Write);
addClassVar('TCanvas', 'Height', 'integer', @_LapeCanvas_Height_Read);
addClassVar('TCanvas', 'Pen', 'TPen', @_LapeCanvas_Pen_Read, @_LapeCanvas_Pen_Write);
addClassVar('TCanvas', 'Width', 'integer', @_LapeCanvas_Width_Read);
addClassVar('TCanvas', 'OnChange', 'TNotifyEvent', @_LapeCanvas_OnChange_Read, @_LapeCanvas_OnChange_Write);
addClassVar('TCanvas', 'OnChanging', 'TNotifyEvent', @_LapeCanvas_OnChanging_Read, @_LapeCanvas_OnChanging_Write);
addClassVar('TCanvas', 'AntialiasingMode', 'TAntialiasingMode', @_LapeCanvas_AntialiasingMode_Get, @_LapeCanvas_AntialiasingMode_Set);
addGlobalFunc('procedure TCanvas.Init; override', @_LapeCanvas_Init);
//addGlobalFunc('procedure TCanvas.Free;', @_LapeCanvas_Free);

addClass('TBitmap', 'TGraphic');
addGlobalFunc('procedure TBitmap.Init; override', @_LapeBitmap_Init);
addGlobalFunc('procedure TBitmap.BeginUpdate(ACanvasOnly: Boolean);', @_LapeBitmap_BeginUpdate);
addGlobalFunc('procedure TBitmap.EndUpdate(AStreamIsValid: Boolean);', @_LapeBitmap_EndUpdate);
addGlobalFunc('procedure TBitmap.FreeImage;', @_LapeBitmap_FreeImage);
addGlobalFunc('function TBitmap.BitmapHandleAllocated: boolean;', @_LapeBitmap_BitmapHandleAllocated);
addGlobalFunc('function TBitmap.MaskHandleAllocated: boolean;', @_LapeBitmap_MaskHandleAllocated);
addGlobalFunc('function TBitmap.PaletteAllocated: boolean;', @_LapeBitmap_PaletteAllocated);
addGlobalFunc('procedure TBitmap.LoadFromStream(AStream: TStream);', @_LapeBitmap_LoadFromStream);
addGlobalFunc('procedure TBitmap.LoadFromStream(AStream: TStream; ASize: UInt32); overload', @_LapeBitmap_LoadFromStreamEx);
addGlobalFunc('procedure TBitmap.SaveToStream(AStream: TStream);', @_LapeBitmap_SaveToStream);
addGlobalFunc('procedure TBitmap.GetSize(var AWidth, AHeight: Integer);', @_LapeBitmap_GetSize);
addGlobalFunc('procedure TBitmap.Mask(ATransparentColor: TColor);', @_LapeBitmap_Mask);
addGlobalFunc('function TBitmap.ReleaseBitmapHandle: THandle;', @_LapeBitmap_ReleaseBitmapHandle);
addGlobalFunc('function TBitmap.ReleaseMaskHandle: THandle;', @_LapeBitmap_ReleaseMaskHandle);
addGlobalFunc('function TBitmap.ReleasePalette: THandle;', @_LapeBitmap_ReleasePalette);
addGlobalFunc('function TBitmap.ToString: string;', @_LapeBitmap_ToString);
addGlobalFunc('procedure TBitmap.LoadFromString(w, h, TransparentColor: integer; data: string);', @_LapeBitmap_LoadFromString);
addClassVar('TBitmap', 'Canvas', 'TCanvas', @_LapeBitmap_Canvas_Read);
addGlobalFunc('function TBitmap.HandleAllocated: boolean;', @_LapeBitmap_HandleAllocated);
addClassVar('TBitmap', 'BitmapHandle', 'THandle', @_LapeBitmap_BitmapHandle_Read, @_LapeBitmap_BitmapHandle_Write);
addClassVar('TBitmap', 'Masked', 'Boolean', @_LapeBitmap_Masked_Read, @_LapeBitmap_Masked_Write);
addClassVar('TBitmap', 'MaskHandle', 'THandle', @_LapeBitmap_MaskHandle_Read, @_LapeBitmap_MaskHandle_Write);
addClassVar('TBitmap', 'TransparentColor', 'TColor', @_LapeBitmap_TransparentColor_Read, @_LapeBitmap_TransparentColor_Write);
addClassVar('TBitmap', 'TransparentMode', 'TTransparentMode', @_LapeBitmap_TransparentMode_Read, @_LapeBitmap_TransparentMode_Write);
// addClassVar('TBitmap', 'Transparent', 'Boolean', @_LapeBitmap_TransparentMode_Read, @_LapeBitmap_Transparent_Write);
// addGlobalFunc('procedure TBitmap.Free;', @_LapeBitmap_Free);

addClass('TPicture', 'TPersistent');
addGlobalFunc('procedure TPicture.Init; override', @_LapePicture_Init);
addGlobalFunc('procedure TPicture.Clear;', @_LapePicture_Clear);
addGlobalFunc('procedure TPicture.LoadFromFile(const Filename: string);', @_LapePicture_LoadFromFile);
addGlobalFunc('procedure TPicture.LoadFromStream(Stream: TStream);', @_LapePicture_LoadFromStream);
addGlobalFunc('procedure TPicture.LoadFromStreamWithFileExt(Stream: TStream; const FileExt: string);', @_LapePicture_LoadFromStreamWithFileExt);
addGlobalFunc('procedure TPicture.SaveToFile(const Filename: string; const FileExt: string);', @_LapePicture_SaveToFile);
addGlobalFunc('procedure TPicture.SaveToStream(Stream: TStream);', @_LapePicture_SaveToStream);
addGlobalFunc('procedure TPicture.SaveToStreamWithFileExt(Stream: TStream; const FileExt: string);', @_LapePicture_SaveToStreamWithFileExt);
addClassVar('TPicture', 'Bitmap', 'TBitmap', @_LapePicture_Bitmap_Read, @_LapePicture_Bitmap_Write);
addClassVar('TPicture', 'Graphic', 'TGraphic', @_LapePicture_Graphic_Read, @_LapePicture_Graphic_Write);
addClassVar('TPicture', 'Height', 'Integer', @_LapePicture_Height_Read);
addClassVar('TPicture', 'Width', 'Integer', @_LapePicture_Width_Read);
addClassVar('TPicture', 'OnChange', 'TNotifyEvent', @_LapePicture_OnChange_Read, @_LapePicture_OnChange_Write);
//addGlobalFunc('procedure TPicture.Free;', @_LapePicture_Free);

popSection();
