pushSection('Classes');

addClass('TMFinder');
addClassVar('TMFinder', 'WarnOnly', 'boolean', @_LapeMFinder_WarnOnly_Read, @_LapeMFinder_WarnOnly_Write);
addGlobalFunc('procedure TMFinder.DefaultOperations(var xs,ys,xe,ye : integer);', @_LapeMFinder_DefaultOperations);
addGlobalFunc('function TMFinder.CountColorTolerance(Color, xs, ys, xe, ye, Tolerance: Integer): Integer;', @_LapeMFinder_CountColorTolerance);
addGlobalFunc('function TMFinder.CountColor(Color, xs, ys, xe, ye: Integer): Integer;', @_LapeMFinder_CountColor);
addGlobalFunc('function TMFinder.SimilarColors(Color1,Color2,Tolerance : Integer): boolean;', @_LapeMFinder_SimilarColors);
addGlobalFunc('function TMFinder.FindColor(out x, y: Integer; Color, xs, ys, xe, ye: Integer): Boolean;', @_LapeMFinder_FindColor);
addGlobalFunc('function TMFinder.FindColorSpiral(var x, y: Integer; color, xs, ys, xe, ye: Integer): Boolean;', @_LapeMFinder_FindColorSpiral);
addGlobalFunc('function TMFinder.FindColorSpiralTolerance(var x, y: Integer; color, xs, ys, xe, ye,Tol: Integer): Boolean;', @_LapeMFinder_FindColorSpiralTolerance);
addGlobalFunc('function TMFinder.FindColorTolerance(out x, y: Integer; Color, xs, ys, xe, ye, tol: Integer): Boolean;', @_LapeMFinder_FindColorTolerance);
addGlobalFunc('function TMFinder.FindColorsTolerance(out Points: TPointArray; Color, xs, ys, xe, ye, Tol: Integer): Boolean;', @_LapeMFinder_FindColorsTolerance);
addGlobalFunc('function TMFinder.FindColorsSpiralTolerance(x, y: Integer; out Points: TPointArray; color, xs, ys, xe, ye: Integer; Tol: Integer): boolean;', @_LapeMFinder_FindColorsSpiralTolerance);
addGlobalFunc('function TMFinder.FindColors(var TPA: TPointArray; Color, xs, ys, xe, ye: Integer): Boolean;', @_LapeMFinder_FindColors);
addGlobalFunc('function TMFinder.FindColoredArea(var x, y: Integer; color, xs, ys, xe, ye: Integer; MinArea: Integer): Boolean;', @_LapeMFinder_FindColoredArea);
addGlobalFunc('function TMFinder.FindColoredAreaTolerance(var x, y: Integer; color, xs, ys, xe, ye: Integer; MinArea, tol: Integer): Boolean;', @_LapeMFinder_FindColoredAreaTolerance);
addGlobalFunc('function TMFinder.FindMaskTolerance(const mask: TMask; out x, y: Integer; xs, ys, xe, ye: Integer; Tolerance, ContourTolerance: Integer): Boolean;', @_LapeMFinder_FindMaskTolerance);
addGlobalFunc('procedure TMFinder.CheckMask(const Mask : TMask);', @_LapeMFinder_CheckMask);
addGlobalFunc('function TMFinder.FindBitmap(bitmap: TMufasaBitmap; out x, y: Integer): Boolean;', @_LapeMFinder_FindBitmap);
addGlobalFunc('function TMFinder.FindBitmapIn(bitmap: TMufasaBitmap; out x, y: Integer;  xs, ys, xe, ye: Integer): Boolean;', @_LapeMFinder_FindBitmapIn);
addGlobalFunc('function TMFinder.FindBitmapToleranceIn(bitmap: TMufasaBitmap; out x, y: Integer; xs, ys, xe, ye: Integer; tolerance: Integer): Boolean;', @_LapeMFinder_FindBitmapToleranceIn);
addGlobalFunc('function TMFinder.FindBitmapSpiral(bitmap: TMufasaBitmap; var x, y: Integer; xs, ys, xe, ye: Integer): Boolean;', @_LapeMFinder_FindBitmapSpiral);
addGlobalFunc('function TMFinder.FindBitmapSpiralTolerance(bitmap: TMufasaBitmap; var x, y: Integer; xs, ys, xe, ye,tolerance : integer): Boolean;', @_LapeMFinder_FindBitmapSpiralTolerance);
addGlobalFunc('function TMFinder.FindBitmapsSpiralTolerance(bitmap: TMufasaBitmap; x, y: Integer; out Points : TPointArray; xs, ys, xe, ye,tolerance: Integer; maxToFind: Integer = 0): Boolean;', @_LapeMFinder_FindBitmapsSpiralTolerance);
addGlobalFunc('function TMFinder.FindDeformedBitmapToleranceIn(bitmap: TMufasaBitmap; out x, y: Integer; xs, ys, xe, ye: Integer; tolerance: Integer; Range: Integer; AllowPartialAccuracy: Boolean; out accuracy: Extended): Boolean;', @_LapeMFinder_FindDeformedBitmapToleranceIn);
addGlobalFunc('function TMFinder.FindDTM(DTM: TMDTM; out x, y: Integer; x1, y1, x2, y2: Integer): Boolean;', @_LapeMFinder_FindDTM);
addGlobalFunc('function TMFinder.FindDTMs(DTM: TMDTM; out Points: TPointArray; x1, y1, x2, y2 : integer; maxToFind: Integer = 0): Boolean;', @_LapeMFinder_FindDTMs);
addGlobalFunc('function TMFinder.FindDTMRotated(DTM: TMDTM; out x, y: Integer; x1, y1, x2, y2: Integer; sAngle, eAngle, aStep: Extended; out aFound: Extended; Alternating : boolean): Boolean;', @_LapeMFinder_FindDTMRotated);
addGlobalFunc('function TMFinder.FindDTMsRotated(DTM: TMDTM; out Points: TPointArray; x1, y1, x2, y2: Integer; sAngle, eAngle, aStep: Extended; out aFound: T2DExtendedArray;Alternating : boolean; maxToFind: Integer = 0): Boolean;', @_LapeMFinder_FindDTMsRotated);
addGlobalFunc('function TMFinder.GetColors(const Coords: TPointArray): TIntegerArray;', @_LapeMFinder_GetColors);
addGlobalFunc('procedure TMFinder.SetToleranceSpeed(nCTS: Integer);', @_LapeMFinder_SetToleranceSpeed);
addGlobalFunc('function TMFinder.GetToleranceSpeed: Integer;', @_LapeMFinder_GetToleranceSpeed);
addGlobalFunc('procedure TMFinder.SetToleranceSpeed2Modifiers(const nHue, nSat: Extended);', @_LapeMFinder_SetToleranceSpeed2Modifiers);
addGlobalFunc('procedure TMFinder.GetToleranceSpeed2Modifiers(out hMod, sMod: Extended);', @_LapeMFinder_GetToleranceSpeed2Modifiers);
addGlobalFunc('procedure TMFinder.SetToleranceSpeed3Modifier(modifier: Extended);', @_LapeMFinder_SetToleranceSpeed3Modifier);
addGlobalFunc('function TMFinder.GetToleranceSpeed3Modifier: Extended;', @_LapeMFinder_GetToleranceSpeed3Modifier);
addGlobalFunc('procedure TMFinder.Init(aClient: TObject)', @_LapeMFinder_Init);
//addGlobalFunc('procedure TMFinder.Free;', @_LapeMFinder_Free);

popSection();

