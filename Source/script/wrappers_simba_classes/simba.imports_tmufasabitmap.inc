addClass('TMufasaBitmap');
addGlobalType('packed record B, G, R: UInt8; end', 'TRGB24');
addGlobalType('^TRGB24', 'PRGB24');
addGlobalType('packed record B, G, R, A: UInt8; end', 'TRGB32');
addGlobalType('^TRGB32', 'PRGB32');
addGlobalType('array of TRGB32', 'TRGB32Array');
addGlobalType('array of PRGB32', 'TPRGB32Array');
addGlobalType('packed record H, S, L: Extended; end', 'THSL');
addGlobalType('array of THSL', 'THSLArray');
addGlobalType('array of array of THSL', 'T2DHSLArray');
addGlobalType('(MirrorWidth, MirrorHeight, MirrorLine)', 'TBmpMirrorStyle');
addGlobalType('(TM_Mean, TM_MinMax)', 'TBmpThreshMethod');
addGlobalType('(RM_Nearest, RM_Bilinear)', 'TBmpResizeMethod');
addGlobalType('record White, Black: TPointArray; WhiteHi, BlackHi: Integer; W, H: Integer; end', 'TMask');
addClassVar('TMufasaBitmap', 'Data', 'PRGB32', @_LapeMufasaBitmap_Data_Read);
addClassVar('TMufasaBitmap', 'Name', 'string', @_LapeMufasaBitmap_Name_Read, @_LapeMufasaBitmap_Name_Write);
addClassVar('TMufasaBitmap', 'Index', 'Integer', @_LapeMufasaBitmap_Index_Read, @_LapeMufasaBitmap_Index_Write);
addClassVar('TMufasaBitmap', 'Width', 'Integer', @_LapeMufasaBitmap_Width_Read);
addClassVar('TMufasaBitmap', 'Height', 'Integer', @_LapeMufasaBitmap_Height_Read);
addClassVar('TMufasaBitmap', 'Center', 'TPoint', @_LapeMufasaBitmap_Center_Read);
addClassVar('TMufasaBitmap', 'Fonts', 'TStringArray', @_LapeMufasaBitmap_Fonts_Read);
addClassVar('TMufasaBitmap', 'FontName', 'String', @_LapeMufasaBitmap_FontName_Read, @_LapeMufasaBitmap_FontName_Write);
addClassVar('TMufasaBitmap', 'FontSize', 'Single', @_LapeMufasaBitmap_FontSize_Read, @_LapeMufasaBitmap_FontSize_Write);
addClassVar('TMufasaBitmap', 'FontAntialiasing', 'Boolean', @_LapeMufasaBitmap_FontAntialiasing_Read, @_LapeMufasaBitmap_FontAntialiasing_Write);
addGlobalFunc('function TMufasaBitmap.TextWidth(Text: String): Integer; constref', @_LapeMufasaBitmap_TextWidth);
addGlobalFunc('function TMufasaBitmap.TextHeight(Text: String): Integer; constref', @_LapeMufasaBitmap_TextHeight);
addGlobalFunc('function TMufasaBitmap.TextSize(Text: String): TPoint; constref', @_LapeMufasaBitmap_TextSize);
addGlobalFunc('procedure TMufasaBitmap.DrawText(Text: String; Position: TPoint; Color: TColor); constref; overload', @_LapeMufasaBitmap_DrawText);
addGlobalFunc('procedure TMufasaBitmap.DrawText(Text: String; Box: TBox; Center: Boolean; Color: TColor); constref; overload', @_LapeMufasaBitmap_DrawTextEx);
addGlobalFunc('procedure TMufasaBitmap.SetSize(AWidth,AHeight: Integer); constref', @_LapeMufasaBitmap_SetSize);
addGlobalFunc('procedure TMufasaBitmap.StretchResize(AWidth,AHeight: Integer); constref', @_LapeMufasaBitmap_StretchResize);
addGlobalFunc('procedure TMufasaBitmap.SetPersistentMemory(mem: PtrUInt; awidth, aheight: Integer); constref', @_LapeMufasaBitmap_SetPersistentMemory);
addGlobalFunc('procedure TMufasaBitmap.ResetPersistentMemory; constref', @_LapeMufasaBitmap_ResetPersistentMemory);
addGlobalFunc('function TMufasaBitmap.PointInBitmap(x, y: Integer): boolean; constref', @_LapeMufasaBitmap_PointInBitmap);
addGlobalFunc('procedure TMufasaBitmap.ValidatePoint(x, y: Integer); constref', @_LapeMufasaBitmap_ValidatePoint);
addGlobalFunc('function TMufasaBitmap.SaveToFile(const FileName: string): boolean; constref', @_LapeMufasaBitmap_SaveToFile);
addGlobalFunc('procedure TMufasaBitmap.LoadFromFile(const FileName: string); constref', @_LapeMufasaBitmap_LoadFromFile);
addGlobalFunc('procedure TMufasaBitmap.Rectangle(const B: TBox; Color: TColor); constref', @_LapeMufasaBitmap_Rectangle);
addGlobalFunc('procedure TMufasaBitmap.Rectangle(const B: TBox; const Color: Integer; const Transparency: Extended); constref; overload', @_LapeMufasaBitmap_RectangleEx);
addGlobalFunc('procedure TMufasaBitmap.FloodFill(const StartPT: TPoint; const SearchCol, ReplaceCol: TColor); constref', @_LapeMufasaBitmap_FloodFill);
addGlobalFunc('procedure TMufasaBitmap.SetPixel(x, y: Integer; Color: TColor); constref', @_LapeMufasaBitmap_FastSetPixel);
addGlobalFunc('procedure TMufasaBitmap.SetPixels(Points: TPointArray; Colors: TIntegerArray); constref', @_LapeMufasaBitmap_FastSetPixels);
addGlobalFunc('procedure TMufasaBitmap.DrawATPA(ATPA: T2DPointArray; Colors: TIntegerArray); constref', @_LapeMufasaBitmap_DrawATPA);
addGlobalFunc('procedure TMufasaBitmap.DrawATPA(ATPA: T2DPointArray); constref; overload', @_LapeMufasaBitmap_DrawATPAEx);
addGlobalFunc('procedure TMufasaBitmap.DrawTPA(Points: TPointArray; Color: TColor); constref', @_LapeMufasaBitmap_DrawTPA);
addGlobalFunc('procedure TMufasaBitmap.DrawToCanvas(x, y: Integer; Canvas: TCanvas); constref', @_LapeMufasaBitmap_DrawToCanvas);
addGlobalFunc('procedure TMufasaBitmap.LineTo(Src, Dst: TPoint;Color: TColor); constref', @_LapeMufasaBitmap_LineTo);
addGlobalFunc('function TMufasaBitmap.FindColors(out Points: TPointArray; const Color: Integer): Boolean; constref; overload', @_LapeMufasaBitmap_FindColors);
addGlobalFunc('function TMufasaBitmap.FindColors(out Points: TPointArray; const Color, Tolerance: Integer): Boolean; constref; overload', @_LapeMufasaBitmap_FindColorsTolerance);
addGlobalFunc('function TMufasaBitmap.GetPixel(x, y: Integer): TColor; constref', @_LapeMufasaBitmap_FastGetPixel);
addGlobalFunc('function TMufasaBitmap.GetPixels(Points: TPointArray): TIntegerArray; constref', @_LapeMufasaBitmap_FastGetPixels);
addGlobalFunc('function TMufasaBitmap.GetAreaColors(xs, ys, xe, ye: Integer): TIntegerMatrix; constref', @_LapeMufasaBitmap_GetAreaColors);
addGlobalFunc('function TMufasaBitmap.GetHSLValues(xs, ys, xe, ye: Integer): T2DHSLArray; constref', @_LapeMufasaBitmap_GetHSLValues);
addGlobalFunc('procedure TMufasaBitmap.DrawClear(Color: TColor); constref', @_LapeMufasaBitmap_FastDrawClear);
addGlobalFunc('procedure TMufasaBitmap.DrawTransparent(x, y: Integer; TargetBitmap: TMufasaBitmap); constref', @_LapeMufasaBitmap_FastDrawTransparent);
addGlobalFunc('procedure TMufasaBitmap.ReplaceColor(OldColor, NewColor: TColor); constref', @_LapeMufasaBitmap_FastReplaceColor);
addGlobalFunc('procedure TMufasaBitmap.CopyClientToBitmap(MWindow: TObject;Resize: boolean; xs, ys, xe, ye: Integer); constref', @_LapeMufasaBitmap_CopyClientToBitmap);
addGlobalFunc('procedure TMufasaBitmap.CopyClientToBitmap(MWindow: TObject;Resize: boolean;x,y: Integer; xs, ys, xe, ye: Integer); constref; overload', @_LapeMufasaBitmap_CopyClientToBitmapEx);
addGlobalFunc('procedure TMufasaBitmap.RotateBitmap(angle: Extended; TargetBitmap: TMufasaBitmap); constref', @_LapeMufasaBitmap_RotateBitmap);
addGlobalFunc('procedure TMufasaBitmap.RotateBitmapEx(Angle: Single; Expand: Boolean; Smooth: Boolean; TargetBitmap: TMufasaBitmap); constref', @_LapeMufasaBitmap_RotateBitmapEx);
addGlobalFunc('procedure TMufasaBitmap.Desaturate(TargetBitmap: TMufasaBitmap); constref', @_LapeMufasaBitmap_Desaturate);
addGlobalFunc('procedure TMufasaBitmap.Desaturate; constref; overload', @_LapeMufasaBitmap_DesaturateEx);
addGlobalFunc('procedure TMufasaBitmap.GreyScale(TargetBitmap: TMufasaBitmap); constref', @_LapeMufasaBitmap_GreyScale);
addGlobalFunc('procedure TMufasaBitmap.GreyScale; constref; overload', @_LapeMufasaBitmap_GreyScaleEx);
addGlobalFunc('procedure TMufasaBitmap.Brightness(TargetBitmap: TMufasaBitmap; br: Integer); constref', @_LapeMufasaBitmap_Brightness);
addGlobalFunc('procedure TMufasaBitmap.Brightness(br: Integer); constref; overload', @_LapeMufasaBitmap_BrightnessEx);
addGlobalFunc('procedure TMufasaBitmap.Contrast(TargetBitmap: TMufasaBitmap; co: Extended); constref', @_LapeMufasaBitmap_Contrast);
addGlobalFunc('procedure TMufasaBitmap.Contrast(co: Extended); constref; overload', @_LapeMufasaBitmap_ContrastEx);
addGlobalFunc('procedure TMufasaBitmap.Invert(TargetBitmap: TMufasaBitmap); constref', @_LapeMufasaBitmap_Invert);
addGlobalFunc('procedure TMufasaBitmap.Invert; constref; overload', @_LapeMufasaBitmap_InvertEx);
addGlobalFunc('procedure TMufasaBitmap.Posterize(TargetBitmap: TMufasaBitmap; Po: Integer); constref', @_LapeMufasaBitmap_Posterize);
addGlobalFunc('procedure TMufasaBitmap.Posterize(Po: Integer); constref; overload', @_LapeMufasaBitmap_PosterizeEx);
addGlobalFunc('procedure TMufasaBitmap.Blur(const Block: Integer); constref', @_LapeMufasaBitmap_Blur);
addGlobalFunc('procedure TMufasaBitmap.Blur(const Block, xs, ys, xe, ye: Integer); constref; overload', @_LapeMufasaBitmap_BlurEx);
addGlobalFunc('procedure TMufasaBitmap.Convolute(TargetBitmap: TMufasaBitmap; Matrix: T2DExtendedArray); constref', @_LapeMufasaBitmap_Convolute);
addGlobalFunc('function  TMufasaBitmap.CompareAt(Other: TMufasaBitmap; Pt: TPoint; Tol: Integer): Extended', @_LapeMufasaBitmap_CompareAt);
addGlobalFunc('procedure TMufasaBitmap.Downsample(DownScale: Integer; TargetBitmap: TMufasaBitmap); overload', @_LapeMufasaBitmap_Downsample);
addGlobalFunc('function TMufasaBitmap.Downsample(DownScale: Integer; BlendTransparentColor: Boolean = True): TMufasaBitmap; overload', @_LapeMufasaBitmap_DownSampleEx);
addGlobalFunc('procedure TMufasaBitmap.DrawPolyFilled(Poly: TPointArray; Invert: Boolean; Color: TColor); constref', @_LapeMufasaBitmap_DrawPolyFilled);
addGlobalFunc('procedure TMufasaBitmap.DrawCircleFilled(X, Y, Radius: Integer; Invert: Boolean; Color: TColor); constref', @_LapeMufasaBitmap_DrawCircleFilled);
addGlobalFunc('procedure TMufasaBitmap.DrawBoxFilled(const B: TBox; Invert: Boolean; Color: TColor); constref', @_LapeMufasaBitmap_DrawBoxFilled);
addGlobalFunc('procedure TMufasaBitmap.Blend(Points: TPointArray; Size: Integer); constref', @_LapeMufasaBitmap_Blend);
addGlobalFunc('function TMufasaBitmap.Copy(const xs,ys,xe,ye: Integer): TMufasaBitmap; constref', @_LapeMufasaBitmap_Copy);
addGlobalFunc('function TMufasaBitmap.Copy: TMufasaBitmap; constref; overload', @_LapeMufasaBitmap_CopyEx);
addGlobalFunc('procedure TMufasaBitmap.Crop(xs, ys, xe, ye: Integer); constref', @_LapeMufasaBitmap_Crop);
addGlobalFunc('function TMufasaBitmap.GetColors: TIntegerArray; constref', @_LapeMufasaBitmap_GetColors);
addGlobalFunc('function TMufasaBitmap.ToMatrix: TIntegerMatrix; constref', @_LapeMufasaBitmap_ToMatrix);
addGlobalFunc('function TMufasaBitmap.ToGreyMatrix: TByteMatrix; constref', @_LapeMufasaBitmap_ToGreyMatrix);
addGlobalFunc('procedure TMufasaBitmap.DrawMatrix(const Matrix: TIntegerMatrix); constref', @_LapeMufasaBitmap_DrawMatrix);
addGlobalFunc('procedure TMufasaBitmap.DrawMatrix(const Matrix: TSingleMatrix; ColorMapID: Integer = 0); constref; overload', @_LapeMufasaBitmap_DrawMatrixF);
addGlobalFunc('procedure TMufasaBitmap.ThresholdAdaptive(Alpha, Beta: Byte; DoInvert: Boolean; Method: TBmpThreshMethod; C: Integer); constref', @_LapeMufasaBitmap_ThresholdAdaptive);
addGlobalFunc('procedure TMufasaBitmap.Pad(Amount: Integer)', @_LapeMufasaBitmap_Pad);
addGlobalFunc('procedure TMufasaBitmap.ResizeEx(Method: TBmpResizeMethod; NewW, NewH: Integer); constref', @_LapeMufasaBitmap_ResizeEx);
addGlobalFunc('function TMufasaBitmap.ToTBitmap: TBitmap; constref', @_LapeMufasaBitmap_ToTBitmap);
addGlobalFunc('function TMufasaBitmap.ToString: string; constref', @_LapeMufasaBitmap_ToString);
addGlobalFunc('function TMufasaBitmap.RowPtrs: TPRGB32Array; constref', @_LapeMufasaBitmap_RowPtrs);
addGlobalFunc('procedure TMufasaBitmap.LoadFromTBitmap(bmp: TBitmap); constref', @_LapeMufasaBitmap_LoadFromTBitmap);
//addGlobalFunc('procedure TMufasaBitmap.LoadFromRawImage(RawImage: TRawImage); constref', @_LapeMufasaBitmap_LoadFromRawImage);
addGlobalFunc('function TMufasaBitmap.CreateTMask: TMask; constref', @_LapeMufasaBitmap_CreateTMask);
addGlobalFunc('procedure TMufasaBitmap.SetTransparentColor(Col: TColor); constref', @_LapeMufasaBitmap_SetTransparentColor);
addGlobalFunc('function TMufasaBitmap.GetTransparentColor: TColor; constref', @_LapeMufasaBitmap_GetTransparentColor);
addClassVar('TMufasaBitmap', 'TransparentColorSet', 'Boolean', @_LapeMufasaBitmap_TransparentColorSet_Read, nil);
addGlobalFunc('procedure TMufasaBitmap.SetAlphaValue(const value: Byte); constref', @_LapeMufasaBitmap_SetAlphaValue);
addClassVar('TMufasaBitmap', 'List', 'TObject', @_LapeMufasaBitmap_List_Read, @_LapeMufasaBitmap_List_Write);
addGlobalFunc('procedure TMufasaBitmap.Init(List: TObject = nil)', @_LapeMufasaBitmap_Init);
//addGlobalFunc('procedure TMufasaBitmap.Free; constref', @_LapeMufasaBitmap_Free);

