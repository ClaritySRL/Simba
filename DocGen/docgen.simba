var
  SourceFiles: array of record
    FileName: String;
    Title: String;
  end;

begin
  SourceFiles += ['simba.import_point.pas',        'TPoint'        ];
  SourceFiles += ['simba.import_tpa.pas',          'TPointArray'   ];
  SourceFiles += ['simba.import_atpa.pas',         'T2DPointArray' ];
  SourceFiles += ['simba.import_box.pas',          'TBox'          ];
  SourceFiles += ['simba.import_boxarray.pas',     'TBoxArray'     ];
  SourceFiles += ['simba.import_quad.pas',         'TQuad'         ];
  SourceFiles += ['simba.import_windowhandle.pas', 'TWindowHandle' ];
  SourceFiles += ['simba.import_debugimage.pas',   'Debug Image'   ];
  SourceFiles += ['simba.import_variant.pas',      'Variant'       ];
  SourceFiles += ['simba.import_script.pas',       'Script'        ];
  SourceFiles += ['simba.import_random.pas',       'Random'        ];
  SourceFiles += ['simba.import_class_bitmap.pas', 'TMufasaBitmap' ];
  SourceFiles += ['simba.import_class_dtm.pas',    'TDTM'          ];
  SourceFiles += ['simba.import_input.pas',        'Input'         ];
  SourceFiles += ['simba.import_finder.pas',       'Finder'        ];
  SourceFiles += ['simba.import_target.pas',       'Target'        ];
  SourceFiles += ['simba.import_internet.pas',     'Intenet'       ];
  SourceFiles += ['simba.import_file.pas',         'File'          ];
end;

const
  SOURCE_ROOT_DIR = 'Source/script/imports/';

  OUTPUT_DIR = 'DocGen/output/';
  INPUT_DIR  = 'DocGen/input/';

  CONFIG_FILE = "
from datetime import datetime

project = 'Simba'
author = 'Simba'
copyright = str(datetime.now().year) + ', Simba'
templates_path = ['.']
pygments_style='sphinx'
source_suffix = '.rst'
master_doc = 'index'
highlight_language = 'pascal'
html_favicon = '../images/simba.png'
html_theme = 'sphinx_rtd_theme'
extensions = [
    'sphinx.ext.githubpages',
]
";

  TEMPLATE_FILE = "
{% extends '!layout.html' %}
  {% block footer %} {{ super() }}
  <style>
         .wy-nav-content { min-width: 85%; }
  </style>
{% endblock %}";

  TOC_FILE = "
Welcome to Simba documentation
******************************
.. toctree::

";

function Indent(Str: String; Size: Integer): String;
var
  Line: String;
begin
  for Line in Str.Split(LINE_SEP) do
    Result := Result + (#32 * Size) + Line + LINE_SEP;
end;

// Code block to sphinx .. code-block::
{
```
This is a code block
```
}
procedure MakeCodeBlock(var Str: String);
var
  Start, Stop: Integer;
  Block: String;
begin
  Start := 1;
  while ((Start := Str.IndexOf('```', Start)) > 0) do
  begin
    Stop := Str.IndexOf('```', Start + 3) + 3;
    if (Stop <= 3) then
      Break;

    Block := Str.CopyRange(Start, Stop);

    Str.Delete(Start, Block.Length());
    Str.Insert('.. code-block::' + (LINE_SEP * 2) + Indent(Block.Trim([#96, #10, #13]), 4), Start);

    Start := Stop;
  end;
end;

//Inline code to sphinx :code:
{
 This is `inline` code
}
procedure MakeInlineCode(var Str: String);
var
  Start, Stop: Integer;
  Block: String;
begin
  Start := 1;
  while ((Start := Str.IndexOf('`', Start)) > 0) do
  begin
    Stop := Str.IndexOf('`', Start + 1) + 1;
    if (Stop <= 1) then
      Break;

    Str.Insert(':code:', Start);

    Start := Stop + 6;
  end;
end;

// Header to code block
{
Test
****
procedure Test;
}
procedure MakeCodeHeaders(var Str: String);
var
  Start, Stop: Integer;
  P: Integer;
  Header: String;
begin
  Start := 1;

  for Header in ['function', 'procedure', 'operator', 'var', 'const'] do
  begin
    Start := 1;

    while ((Start := Str.IndexOf(Header, Start)) > 0) do
    begin
      if Str.Copy(Start - Length(LINE_SEP), Length(LINE_SEP)) = LINE_SEP then
      begin
        Str.Insert('```', Start);
        Start :=  Str.IndexOf(LINE_SEP, Start);
        if (Start = 0) then
          Exit;
        Str.Insert('```', Start);
      end;

      Start += 1;
    end;
  end;
end;

function ParseComments(FileName, Name: String): Boolean;
var
  Str, Comments: String;
begin
  for Str in FileRead(FileName).BetweenAll('(*', '*)') do
  begin
    if (Comments <> '') then
      Comments += LINE_SEP + '----' + LINE_SEP;
    Comments += Str;
  end;

  Result := Length(Comments) > 0;
  if Result then
  begin
    MakeCodeHeaders(Comments);
    MakeCodeBlock(Comments);
    MakeInlineCode(Comments);

    Comments := Comments.Replace('Image:', '.. figure::');
    Comments := Comments.Replace('Note:', '.. note::');
    Comments := Comments.Replace('Warning:', '.. warning::');

    FileWrite(INPUT_DIR + Name + '.rst', Comments);
    FileAppend(INPUT_DIR + 'index.rst', '   ' + Name + LINE_SEP);
  end;
end;

procedure Build;
var
  I, J: Integer;
  Files: TStringArray;
begin
  Files := DirList(SOURCE_ROOT_DIR, True);
  for I := 0 to High(SourceFiles) do
    for J := 0 to High(Files) do
    begin
      // ignore files in lazarus backup/ dirs
      if DirParent(PathExtractDir(Files[J])) = 'backup' then
        Continue;

      if (SourceFiles[I].FileName = PathExtractName(Files[J])) then
      begin
        ParseComments(Files[J], SourceFiles[I].Title);
        Break;
      end;
    end;
end;

var
  Str: String;
begin
  ClearDebug();

  DirCreate(OUTPUT_DIR);
  DirDelete(OUTPUT_DIR, True);
  DirCreate(INPUT_DIR);
  DirDelete(INPUT_DIR, True);

  FileWrite(INPUT_DIR + 'index.rst', TOC_FILE);
  FileWrite(INPUT_DIR + 'conf.py', CONFIG_FILE);
  FileWrite(INPUT_DIR + 'layout.html', TEMPLATE_FILE);

  Build();

  WriteLn('Sphinx exit code: ', RunCommand('sphinx-build', ['-q', '-E', INPUT_DIR, OUTPUT_DIR], Str));
  if (Str <> '') then
    WriteLn(Str);

  WriteLn('Link: "' + PathNormalize(OUTPUT_DIR) + 'index.html"');
end.
