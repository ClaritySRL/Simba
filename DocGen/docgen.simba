var
  SourceFiles: array of record
    FileName: String;
    Title: String;
  end;

begin
  SourceFiles += ['simba.import_point.pas',        'Point'        ];
  SourceFiles += ['simba.import_box.pas',          'Box'          ];
  SourceFiles += ['simba.import_boxarray.pas',     'Box Array'    ];
  SourceFiles += ['simba.import_quad.pas',         'Quad'         ];
  SourceFiles += ['simba.import_windowhandle.pas', 'Window Handle'];
  SourceFiles += ['simba.import_debugimage.pas',   'Debug Image'  ];
  SourceFiles += ['simba.import_variant.pas',      'Variant'      ];
  SourceFiles += ['simba.import_script.pas',       'Script'       ];
  SourceFiles += ['simba.import_class_bitmap.pas', 'Bitmap'       ];
end;

const
  SOURCE_ROOT_DIR = 'Source/script/imports/';
  SOURCE_IGNORE_DIRS = [
    'backup'
  ];

  OUTPUT_DIR = 'DocGen/output/';
  INPUT_DIR  = 'DocGen/input/';

  CONFIG_FILE = "
from datetime import datetime

project = 'Simba'
author = 'Simba'
copyright = str(datetime.now().year) + ', Simba'
templates_path = ['.']
pygments_style='sphinx'
source_suffix = '.rst'
master_doc = 'index'
highlight_language = 'pascal'
html_favicon = '../images/simba.png'
html_theme = 'sphinx_rtd_theme'
extensions = [
    'sphinx.ext.githubpages',
]
";

  TEMPLATE_FILE = "
{% extends '!layout.html' %}
  {% block footer %} {{ super() }}
  <style>
         .wy-nav-content { min-width: 85%; }
  </style>
{% endblock %}";

  TOC_FILE = "
Welcome to Simba documentation
******************************
.. toctree::

";

function ParseComments(FileName, Name: String): Boolean;
var
  Str, Comments: String;
begin
  for Str in ReadFileContents(FileName).BetweenAll('(*', '*)') do
  begin
    if (Comments <> '') then
      Comments += LineEnding + '----' + LineEnding;
    Comments += Str;
  end;

  Result := Length(Comments) > 0;
  if Result then
  begin
    for Str in ['function', 'procedure', 'operator', 'type', 'var', 'const'] do
      Comments := Comments.Replace(LineEnding + Str + ' ', LineEnding + '::' + LineEnding +  LineEnding + '  ' + Str + ' ');

    Comments := Comments.Replace('Image::', '.. figure::');
    Comments := Comments.Replace('Note::', '.. note::');
    Comments := Comments.Replace('Warning::', '.. warning::');

    WriteFileContents(INPUT_DIR + Name + '.rst', Comments);
    AppendFileContents(INPUT_DIR + 'index.rst', '   ' + Name + LineEnding);
  end;
end;

procedure Build;
var
  I: Integer;
  FileName: String;
begin
  for FileName in FindFiles(SOURCE_ROOT_DIR, True) do
  begin
    if ExtractFileName(ExtractFileDir(FileName)) in SOURCE_IGNORE_DIRS then
      Continue;

    for I := 0 to High(SourceFiles) do
      if (SourceFiles[I].FileName = ExtractFileName(FileName)) then
        ParseComments(FileName, SourceFiles[I].Title);
  end;
end;

var
  Str: String;
begin
  CreateDirectory(INPUT_DIR);
  CreateDirectory(OUTPUT_DIR);
  DeleteDirectory(INPUT_DIR, True);

  WriteFileContents(INPUT_DIR + 'index.rst', TOC_FILE);
  WriteFileContents(INPUT_DIR + 'conf.py', CONFIG_FILE);
  WriteFileContents(INPUT_DIR + 'layout.html', TEMPLATE_FILE);

  Build();

  WriteLn('Sphinx exit code: ', RunCommand('sphinx-build', ['-q', '-E', INPUT_DIR, OUTPUT_DIR], Str));
  if (Str <> '') then
    WriteLn(Str);

  WriteLn('Link: "' + ExpandFileName(OUTPUT_DIR) + 'index.html"');
end.
