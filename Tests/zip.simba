{$assertions on}

const
  ZipFile = SimbaEnv.TempPath + 'test.zip';
  OutputDir = SimbaEnv.TempPath + 'testzip';

procedure Clean;
begin
  DirDelete(SimbaEnv.TempPath + 'testzip', True);
end;

procedure TestCreateZip;
var
  Entries: TStringArray;
begin
  FileWrite(SimbaEnv.TempPath + 'file1.txt', 'Hello World');
  FileWrite(SimbaEnv.TempPath + 'file2.txt', 'abc');
  FileWrite(SimbaEnv.TempPath + 'file3.txt', 'xyz');

  ZipFiles(SimbaEnv.TempPath + 'test.zip', [SimbaEnv.TempPath + 'file1.txt', SimbaEnv.TempPath + 'file2.txt', SimbaEnv.TempPath + 'file3.txt']);

  Entries := Sorted(ZipReadEntries(ZipFile));
  Assert(Length(Entries) = 3);
  Assert(Entries[0] = 'file1.txt');
  Assert(Entries[1] = 'file2.txt');
  Assert(Entries[2] = 'file3.txt');
end;

procedure TestExtract;
var
  Files: TStringArray;
begin
  Clean();

  ZipExtract(ZipFile, OutputDir);

  Files := Sorted(DirList(OutputDir));
  Assert(Length(Files) = 3);
  Assert(PathExtractName(Files[0]) = 'file1.txt');
  Assert(PathExtractName(Files[1]) = 'file2.txt');
  Assert(PathExtractName(Files[2]) = 'file3.txt');
end;

procedure TestExtractEntry;
var
  Files: TStringArray;
begin
  Clean();

  ZipExtractEntry(ZipFile, 'file1.txt', OutputDir);

  Files := Sorted(DirList(OutputDir));
  Assert(Length(Files) = 1);
  Assert(PathExtractName(Files[0]) = 'file1.txt');
end;

procedure TestExtractEntires;
var
  Files: TStringArray;
begin
  Clean();

  Assert(ZipExtractEntries(ZipFile, OutputDir, ['file2.txt', 'file3.txt', 'nope']) = 2);
  Files := Sorted(DirList(OutputDir));
  Assert(Length(Files) = 2);
  Assert(PathExtractName(Files[0]) = 'file2.txt');
  Assert(PathExtractName(Files[1]) = 'file3.txt');
end;

begin
  DirCreate(OutputDir);

  TestCreateZip();
  TestExtract();
  TestExtractEntry();
  TestExtractEntires();
end.
