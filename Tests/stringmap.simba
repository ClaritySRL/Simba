{$assertions on}

procedure Test_NoDuplicate(var List: TStringMap);
var
  Err: String;
begin
  List.Clear();

  try
    List.Value['nothing'];
  except
    Err := GetExceptionMessage();
  end;
  Assert(Err = 'Key "nothing" does not exist');

  List.Add('one', '1');
  List.Add('two', '2');
  List.Add('three', '3');

  Assert(List.Count = 3);
  Assert(List.IndexOf('zero') = -1);
  Assert(List.IndexOf('one') > -1);
  Assert(List.IndexOf('two') > -1);
  Assert(List.IndexOf('three') > -1);

  Assert(List.Value['one'] = '1');
  Assert(List.Value['two'] = '2');
  Assert(List.Value['three'] = '3');

  Assert(ToStr(List.Values['one']) = '[1]');
  Assert(ToStr(List.Values['two']) = '[2]');
  Assert(ToStr(List.Values['three']) = '[3]');

  List.Delete('two');
  List.Delete('three');

  Assert(List.Count = 1);
  Assert(List.KeyFromIndex[0] = 'one');
  Assert(List.ValueFromIndex[0] = '1');

  List.Clear();
  Assert(List.Count = 0);
  Assert(List.IndexOf('1') = -1);
  Assert(List.Exists('1') = False);
  Assert(Length(List.IndicesOf('1')) = 0);
end;

procedure Test_Duplicate(var List: TStringMap);
begin
  List.Clear();

  List.Add('one', '1');
  List.Add('two', '2');
  List.Add('one', '11');
  List.Add('one', '111');

  Assert(ToStr(List.Values['one']) = '[1, 11, 111]');
  Assert(ToStr(List.Values['two']) = '[2]');

  List.Delete('one');

  Assert(List.Count = 1);
  Assert(List.KeyFromIndex[0] = 'two');
  Assert(List.ValueFromIndex[0] = '2');
end;

var
  List: TStringMap;
begin
  List.Sorted := True;
  Test_NoDuplicate(List);

  List.Sorted := False;
  Test_NoDuplicate(List);

  List.AllowDuplicates := True;

  List.Sorted := True;
  Test_Duplicate(List);

  List.Sorted := False;
  Test_Duplicate(List);
end;
